// Generated by CoffeeScript 1.12.5
var PropTypes, React, RetinaImage, arrayEqual, assign, imageExists, isRetina, path,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('react');

PropTypes = require('prop-types');

isRetina = require('is-retina');

imageExists = require('image-exists');

path = require('path');

assign = require('object-assign');

arrayEqual = require('array-equal');

module.exports = RetinaImage = (function(superClass) {
  extend(RetinaImage, superClass);

  RetinaImage.propTypes = {
    src: PropTypes.oneOfType([PropTypes.string, PropTypes.array]).isRequired,
    checkIfRetinaImgExists: PropTypes.bool,
    forceOriginalDimensions: PropTypes.bool,
    retinaImageSuffix: PropTypes.string,
    handleOnLoad: PropTypes.func,
    onLoad: PropTypes.func,
    onError: PropTypes.func
  };

  RetinaImage.defaultProps = {
    checkIfRetinaImgExists: true,
    forceOriginalDimensions: true,
    retinaImageSuffix: '@2x',
    onError: function() {}
  };

  function RetinaImage(props) {
    this.handleOnLoad = bind(this.handleOnLoad, this);
    RetinaImage.__super__.constructor.call(this, props);
    this.state = this.wrangleProps();
  }

  RetinaImage.prototype.componentWillReceiveProps = function(nextProps) {
    var isEqual;
    isEqual = true;
    if (Array.isArray(this.props.src) && Array.isArray(nextProps.src)) {
      isEqual = arrayEqual(this.props.src, nextProps.src);
    } else {
      isEqual = this.props.src === nextProps.src;
    }
    if (!isEqual) {
      return this.setState(assign(this.wrangleProps(nextProps), {
        width: null,
        height: null,
        imgLoaded: null,
        retinaImgExists: null,
        retinaCheckComplete: null
      }));
    }
  };

  RetinaImage.prototype.componentDidMount = function() {
    this.checkForRetina();
    return this.checkLoaded();
  };

  RetinaImage.prototype.componentDidUpdate = function() {
    return this.checkForRetina();
  };

  RetinaImage.prototype.render = function() {
    var imgProps;
    imgProps = assign({}, this.props);
    delete imgProps.src;
    delete imgProps.checkIfRetinaImgExists;
    delete imgProps.forceOriginalDimensions;
    delete imgProps.retinaImageSuffix;
    delete imgProps.handleOnLoad;
    delete imgProps.onLoad;
    delete imgProps.onError;
    imgProps.src = this.state.src;
    imgProps.onLoad = this.handleOnLoad;
    imgProps.onError = this.props.onError;
    if (this.state.width >= 0) {
      imgProps.width = this.state.width;
    }
    if (this.state.height >= 0) {
      imgProps.height = this.state.height;
    }
    return React.createElement("img", Object.assign({}, imgProps, {
      "ref": "img"
    }));
  };

  RetinaImage.prototype.wrangleProps = function(props) {
    if (props == null) {
      props = this.props;
    }
    if (Array.isArray(props.src)) {
      return {
        src: props.src[0],
        srcIsArray: true
      };
    } else {
      return {
        src: props.src,
        srcIsArray: false
      };
    }
  };

  RetinaImage.prototype.checkForRetina = function() {
    if (this.state.retinaCheckComplete) {
      return;
    }
    if (isRetina() && this.props.checkIfRetinaImgExists) {
      return imageExists(this.getRetinaPath(), (function(_this) {
        return function(exists) {
          var ref;
          if (exists && ((ref = _this.state) != null ? ref.imgLoaded : void 0)) {
            _this.setState({
              src: _this.getRetinaPath()
            });
          } else if (exists) {
            _this.setState({
              retinaImgExists: true
            });
          }
          return _this.setState({
            retinaCheckComplete: true
          });
        };
      })(this));
    } else if (isRetina() && !this.props.checkIfRetinaImgExists) {
      this.setState({
        src: this.getRetinaPath()
      });
      return this.setState({
        retinaCheckComplete: true
      });
    }
  };

  RetinaImage.prototype.checkLoaded = function() {
    var el;
    el = this.refs.img;
    if (!el.complete) {
      return false;
    }
    if (el.naturalWidth === 0) {
      return false;
    }
    return this.handleOnLoad();
  };

  RetinaImage.prototype.handleOnLoad = function(e) {
    var ref;
    if (this.props.onLoad != null) {
      this.props.onLoad(e);
    }
    if (this.props.handleOnLoad != null) {
      this.props.handleOnLoad(e);
    }
    if (this.props.forceOriginalDimensions) {
      this.setState({
        width: this.refs.img.clientWidth,
        height: this.refs.img.clientHeight
      });
    }
    this.setState({
      imgLoaded: true
    });
    if (((ref = this.state) != null ? ref.retinaImgExists : void 0) || !this.props.checkIfRetinaImgExists) {
      return this.setState({
        src: this.getRetinaPath()
      });
    }
  };

  RetinaImage.prototype.getRetinaPath = function() {
    var basename, src;
    if (this.state.srcIsArray) {
      return this.props.src[1];
    } else {
      basename = path.basename(this.props.src, path.extname(this.props.src));
      basename = basename + this.props.retinaImageSuffix + path.extname(this.props.src);
      src = this.props.src.replace(path.basename(this.props.src), basename);
      return src;
    }
  };

  return RetinaImage;

})(React.Component);
