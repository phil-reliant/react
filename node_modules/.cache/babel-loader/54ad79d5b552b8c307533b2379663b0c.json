{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\FlexibleContent\\\\ContactForm.js\";\nimport React, { useRef, useState } from \"react\";\nimport { GravityFormConstants } from '../../GravityFormsConstants';\nimport PropTypes from \"prop-types\";\nimport Loading from '../GravityForms/Fields/Loading';\nimport GravityForm from '../GravityForms';\nimport Variables from '../../assets/scss/config/_variables.scss';\n\nconst ContactForm = props => {\n  const {\n    titleText,\n    subtext,\n    tabDefinitions,\n    forceSingleColumn,\n    // will ignore CSS class 2-up (used on product page)\n    forceSplitTabWidth // will force tabs to each be 50% (used on product page)\n\n  } = props;\n  const [selectedTab, setSelectedTab] = useState(0);\n  const gfForm1 = useRef(null);\n  const gfForm2 = useRef(null); // temp variable to keep track of submitted forms that need resetting\n\n  let submittedFormsPendingResetQueue = [];\n\n  const tabClicked = index => {\n    setSelectedTab(index);\n  };\n\n  const submitSuccessFunction = () => {\n    // console.log('submitsuccess, selectedTab is', selectedTab);\n    submittedFormsPendingResetQueue.push(selectedTab);\n    clearSubmissionAfterTimer();\n    return true;\n  };\n\n  const clearSubmissionAfterTimer = () => {\n    let formToReset = submittedFormsPendingResetQueue.shift(); // take the first item pushed that is still queued\n\n    if (!formToReset) {\n      return;\n    } // console.log('startingtimer, formToReset is', formToReset);\n\n\n    setTimeout(function () {\n      // console.log('timer done, formToReset is', formToReset);\n      if (formToReset === 0) {\n        if (gfForm1 && gfForm1.current) {\n          // console.log('resetting form 1');\n          gfForm1.current.resetForm();\n        }\n      } else if (formToReset === 1) {\n        if (gfForm2 && gfForm2.current) {\n          // console.log('resetting form 2');\n          gfForm2.current.resetForm();\n        }\n      }\n    }, Variables.formResetDurationInMS);\n  };\n\n  const forms = tabDefinitions.map((item, index) => {\n    var formClasses = ``;\n\n    if (selectedTab !== index) {\n      formClasses += ` hidden`;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: formClasses,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(GravityForm, {\n      ref: index === 0 ? gfForm1 : gfForm2,\n      backendUrl: GravityFormConstants.rootUrl + `/forms`,\n      authString: GravityFormConstants.authString,\n      formID: item.formId // onChange={changeFunction} // optional\n      ,\n      onSubmitSuccess: submitSuccessFunction // optional - calls after form has been submitted successfully\n      ,\n      styledComponents: {\n        Loading\n      },\n      populatedFields: {\n        parameterName: \"Value\"\n      },\n      jumpToConfirmation: false // optional, default is equal to true\n      ,\n      handleRedirectSuccessWithMessage: \"Thanks for contacting us! We will get in touch with you shortly.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }));\n  });\n  const tabs = tabDefinitions.map((item, index) => {\n    var tabClasses = `contact-form--tab-wrapper--inner--tabs--tab tab ${forceSplitTabWidth ? 'force-split-width' : ''}`;\n\n    if (selectedTab === index) {\n      tabClasses += ` selected`;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: `tab_${index}`,\n      className: tabClasses,\n      onClick: () => tabClicked(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 4\n      }\n    }, item.tabTitle);\n  });\n  let tabInernalHeaderText = tabDefinitions[selectedTab].internalHeader;\n  var contentClasses = `contact-form--tab-wrapper--inner--tab-content`;\n\n  if (forceSingleColumn) {\n    contentClasses += ` single-column-inputs`;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `contact-form`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 3\n    }\n  }, titleText || subtext ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container contact-form--headings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, titleText), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"subtext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, subtext)))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 contact-form--tab-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `contact-form--tab-wrapper--inner`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `contact-form--tab-wrapper--inner--tabs`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 8\n    }\n  }, tabs), /*#__PURE__*/React.createElement(\"div\", {\n    className: contentClasses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"h7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, tabInernalHeaderText), forms))))));\n};\n\nContactForm.propTypes = {\n  titleText: PropTypes.string,\n  subtext: PropTypes.string,\n  tabDefinitions: PropTypes.array\n};\nexport default ContactForm;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/FlexibleContent/ContactForm.js"],"names":["React","useRef","useState","GravityFormConstants","PropTypes","Loading","GravityForm","Variables","ContactForm","props","titleText","subtext","tabDefinitions","forceSingleColumn","forceSplitTabWidth","selectedTab","setSelectedTab","gfForm1","gfForm2","submittedFormsPendingResetQueue","tabClicked","index","submitSuccessFunction","push","clearSubmissionAfterTimer","formToReset","shift","setTimeout","current","resetForm","formResetDurationInMS","forms","map","item","formClasses","rootUrl","authString","formId","parameterName","tabs","tabClasses","tabTitle","tabInernalHeaderText","internalHeader","contentClasses","propTypes","string","array"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { GravityFormConstants } from '../../GravityFormsConstants';\nimport PropTypes from \"prop-types\";\nimport Loading from '../GravityForms/Fields/Loading';\nimport GravityForm from '../GravityForms';\nimport Variables from '../../assets/scss/config/_variables.scss';\n\nconst ContactForm = props => {\n\tconst {\n\t\ttitleText,\n\t\tsubtext,\n\t\ttabDefinitions,\n\t\tforceSingleColumn, // will ignore CSS class 2-up (used on product page)\n\t\tforceSplitTabWidth // will force tabs to each be 50% (used on product page)\n\t} = props;\n\n\tconst [selectedTab, setSelectedTab] = useState(0);\n\tconst gfForm1 = useRef(null);\n\tconst gfForm2 = useRef(null);\n\n\t// temp variable to keep track of submitted forms that need resetting\n\tlet submittedFormsPendingResetQueue = [];\n\n\tconst tabClicked = (index) => {\n\t\tsetSelectedTab(index);\n\t}\n\n\tconst submitSuccessFunction = () => {\n\t\t// console.log('submitsuccess, selectedTab is', selectedTab);\n\t\tsubmittedFormsPendingResetQueue.push(selectedTab);\n\t\tclearSubmissionAfterTimer();\n\t\treturn true;\n\t}\n\n\tconst clearSubmissionAfterTimer = () => {\n\t\tlet formToReset = submittedFormsPendingResetQueue.shift(); // take the first item pushed that is still queued\n\t\tif (!formToReset) {\n\t\t\treturn;\n\t\t}\n\t\t// console.log('startingtimer, formToReset is', formToReset);\n\t\tsetTimeout(function () {\n\t\t\t// console.log('timer done, formToReset is', formToReset);\n\t\t\tif (formToReset === 0) {\n\t\t\t\tif (gfForm1 && gfForm1.current) {\n\t\t\t\t\t// console.log('resetting form 1');\n\t\t\t\t\tgfForm1.current.resetForm();\n\t\t\t\t}\n\t\t\t} else if (formToReset === 1) {\n\t\t\t\tif (gfForm2 && gfForm2.current) {\n\t\t\t\t\t// console.log('resetting form 2');\n\t\t\t\t\tgfForm2.current.resetForm();\n\t\t\t\t}\n\t\t\t}\n\t\t}, Variables.formResetDurationInMS);\n\t}\n\n\tconst forms = tabDefinitions.map((item,index) => {\n\t\tvar formClasses = ``;\n\t\tif( selectedTab !== index ){\n\t\t\tformClasses += ` hidden`;\n\t\t}\n\t\treturn  (\n\t\t\t<div key={index} className={formClasses}>\n\t\t\t\t<GravityForm\n\t\t\t\t\tref={index === 0 ? gfForm1 : gfForm2}\n\t\t\t\t\tbackendUrl={GravityFormConstants.rootUrl + `/forms`}\n\t\t\t\t\tauthString={GravityFormConstants.authString}\n\t\t\t\t\tformID={item.formId}\n\t\t\t\t\t// onChange={changeFunction} // optional\n\t\t\t\t\tonSubmitSuccess={submitSuccessFunction} // optional - calls after form has been submitted successfully\n\t\t\t\t\tstyledComponents={{Loading}}\n\t\t\t\t\tpopulatedFields={{parameterName: \"Value\"}}\n\t\t\t\t\tjumpToConfirmation={false} // optional, default is equal to true\n\t\t\t\t\thandleRedirectSuccessWithMessage='Thanks for contacting us! We will get in touch with you shortly.'\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t})\n\n\tconst tabs = tabDefinitions.map((item, index) => {\n\t\tvar tabClasses = `contact-form--tab-wrapper--inner--tabs--tab tab ${forceSplitTabWidth ? 'force-split-width' : ''}`;\n\t\tif (selectedTab === index) {\n\t\t\ttabClasses += ` selected`;\n\t\t}\n\t\treturn (\n\t\t\t<div key={`tab_${index}`}\n\t\t\t\tclassName={tabClasses}\n\t\t\t\tonClick={() => tabClicked(index)}>\n\t\t\t\t{item.tabTitle}\n\t\t\t</div>\n\t\t);\n\t})\n\n\tlet tabInernalHeaderText = tabDefinitions[selectedTab].internalHeader;\n\n\tvar contentClasses = `contact-form--tab-wrapper--inner--tab-content`;\n\tif( forceSingleColumn ){\n\t\tcontentClasses += ` single-column-inputs`;\n\t}\n\n\treturn (\n\t\t<div className={`contact-form`}>\n\t\t{ ( titleText || subtext )? (\n\t\t\t<div className=\"container contact-form--headings\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t<h4>{titleText}</h4>\n\t\t\t\t\t\t<p className=\"subtext\">{subtext}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t) : <></>\n\t\t}\n\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-12 contact-form--tab-wrapper\">\n\t\t\t\t\t\t<div className={`contact-form--tab-wrapper--inner`}>\n\t\t\t\t\t\t\t<div className={`contact-form--tab-wrapper--inner--tabs`}>\n\t\t\t\t\t\t\t\t{tabs}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className={contentClasses}>\n\t\t\t\t\t\t\t\t<h6 className=\"h7\">{tabInernalHeaderText}</h6>\n\t\t\t\t\t\t\t\t{forms}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nContactForm.propTypes = {\n\ttitleText: PropTypes.string,\n\tsubtext: PropTypes.string,\n\ttabDefinitions: PropTypes.array\n};\n\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}