{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\LeadGenFormAndPanel\\\\StickyDrawerWrapper.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport StickyDrawerBottom from \"./StickyDrawerBottom\";\nimport StickyDrawerSide from \"./StickyDrawerSide\";\nimport fieldDefinitions from \"./FieldDefinitions\";\nimport interestDefinitions from \"./InterestDefinitions\";\nimport { GravityFormConstants } from '../../GravityFormsConstants';\nimport { GetFieldsWithErrors } from '../../utils/FormValidationHelpers';\nimport SubmitGravityForm from '../../utils/GravityFormsHelpers';\nimport Variables from '../../assets/scss/config/_variables.scss';\n\nconst StickyDrawerWrapper = props => {\n  const {\n    showFormArea\n  } = props; // NOTE:: we must set initial values for checkboxes, otherwise we will receive an error stating:\n  // \"A component is changing an uncontrolled input of type checkbox\"\n  // ref: https://stackoverflow.com/a/53072573/18005\n  // NOTE:: if these values change, must update resetAllFields() as well\n\n  const [checkedInterests, setCheckedInterests] = useState({\n    [GravityFormConstants.selectionIds.leadGen_interests_maintenance]: false,\n    [GravityFormConstants.selectionIds.leadGen_interests_hardware]: false,\n    [GravityFormConstants.selectionIds.leadGen_interests_consultation]: false,\n    [GravityFormConstants.selectionIds.leadGen_interests_imNotSure]: false\n  }); // NOTE:: if these values change, must update resetAllFields() as well\n\n  const [fieldValues, setFieldValues] = useState({\n    [GravityFormConstants.fieldIds.leadGen_firstName]: '',\n    [GravityFormConstants.fieldIds.leadGen_lastName]: '',\n    [GravityFormConstants.fieldIds.leadGen_companyName]: '',\n    [GravityFormConstants.fieldIds.leadGen_companyEmail]: '',\n    [GravityFormConstants.fieldIds.leadGen_phone]: '',\n    [GravityFormConstants.fieldIds.leadGen_tellUsAbout]: ''\n  });\n  const [invalidFields, setInvalidFields] = useState({}); // stores field values (prefixed by tab) ex: `tab0_firstName`, `tab1_firstName`\n\n  const [successfullySubmitted, setSuccessfullySubmitted] = useState(false);\n  const [submitInProgress, setSubmitInProgress] = useState(false); // whether an async call to submit the form is in progress (for showing loader)\n\n  const handleCheckedInterestsChanged = event => {\n    setCheckedInterests({ ...checkedInterests,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  const handleFieldValueChanged = event => {\n    setFieldValues({ ...fieldValues,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const resetAllFields = () => {\n    setCheckedInterests({\n      [GravityFormConstants.selectionIds.leadGen_interests_maintenance]: false,\n      [GravityFormConstants.selectionIds.leadGen_interests_hardware]: false,\n      [GravityFormConstants.selectionIds.leadGen_interests_consultation]: false,\n      [GravityFormConstants.selectionIds.leadGen_interests_imNotSure]: false\n    });\n    setFieldValues({\n      [GravityFormConstants.fieldIds.leadGen_firstName]: '',\n      [GravityFormConstants.fieldIds.leadGen_lastName]: '',\n      [GravityFormConstants.fieldIds.leadGen_companyName]: '',\n      [GravityFormConstants.fieldIds.leadGen_companyEmail]: '',\n      [GravityFormConstants.fieldIds.leadGen_phone]: '',\n      [GravityFormConstants.fieldIds.leadGen_tellUsAbout]: ''\n    });\n  };\n\n  const getSelectedInterestsAsArray = () => {\n    let selectedInterestsArray = [];\n\n    for (var interest in checkedInterests) {\n      if (checkedInterests[interest] === true) {\n        selectedInterestsArray.push(interest);\n      }\n    }\n\n    return selectedInterestsArray;\n  };\n\n  const getValuesForForm = () => {\n    let values = {}; // set the value for the interest selections\n\n    let interests = getSelectedInterestsAsArray();\n    values[GravityFormConstants.fieldIds.leadGen_interests] = interests; // iterate all the text fields and add them to our collection\n\n    for (var fieldValue in fieldValues) {\n      values[fieldValue] = fieldValues[fieldValue];\n    }\n\n    return values;\n  };\n\n  const handleSubmit = event => {\n    // console.log('handleSubmit');\n    event.preventDefault(); // console.log('setSubmitInProgress = true');\n\n    setSubmitInProgress(true);\n    let newInvalidFields = GetFieldsWithErrors('#lead-gen-form');\n\n    if (newInvalidFields && newInvalidFields.length > 0) {\n      let newCollection = {};\n\n      for (let invalidFieldIndex in newInvalidFields) {\n        let invalidField = newInvalidFields[invalidFieldIndex];\n        let keyField = invalidField.name;\n        newCollection[keyField] = 'error';\n      }\n\n      setInvalidFields(newCollection);\n    } else {\n      setInvalidFields({});\n    }\n\n    var subscribeForm = document.querySelector('#lead-gen-form');\n\n    if (!subscribeForm.checkValidity()) {\n      subscribeForm.reportValidity();\n      setSubmitInProgress(false);\n      return;\n    }\n\n    let jsonObject = getValuesForForm(); // console.log('jsonObject1', jsonObject);\n\n    SubmitGravityForm(GravityFormConstants.formIds.leadGen, jsonObject, processResults);\n  };\n\n  const processResults = async results => {\n    // console.log('processResults setSubmitInProgress = false');\n    setSubmitInProgress(false);\n\n    if (results.success) {\n      setSuccessfullySubmitted(true);\n      clearSubmissionAfterTimer();\n    } else {\n      console.error('request error', results.errorMsg);\n      alert('Something went wrong. Please try again or give us a call at 877-227-0828.');\n    }\n  };\n\n  const clearSubmissionAfterTimer = () => {\n    setTimeout(function () {\n      resetAllFields();\n      setSuccessfullySubmitted(false);\n    }, Variables.formResetDurationInMS);\n  }; // fired when the selection of checked interests (on panel 1) changes\n\n\n  useEffect(() => {// console.log(\"checkedItems: \", checkedInterests)\n  }, [checkedInterests]); // fired when the selection of checked interests (on panel 1) changes\n\n  useEffect(() => {// console.log(\"fieldValues: \", fieldValues)\n  }, [fieldValues]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"--desktop-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(StickyDrawerSide, {\n    showFormArea: showFormArea,\n    interestDefinitions: interestDefinitions,\n    checkedInterests: checkedInterests,\n    handleCheckedInterestsChanged: handleCheckedInterestsChanged,\n    fieldDefinitions: fieldDefinitions,\n    fieldValues: fieldValues,\n    invalidFields: invalidFields,\n    submitInProgress: submitInProgress,\n    successfullySubmitted: successfullySubmitted,\n    handleFieldValueChanged: handleFieldValueChanged,\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"--mobile-only sticky-drawer-bottom-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(StickyDrawerBottom, {\n    showFormArea: showFormArea,\n    interestDefinitions: interestDefinitions,\n    checkedInterests: checkedInterests,\n    handleCheckedInterestsChanged: handleCheckedInterestsChanged,\n    fieldDefinitions: fieldDefinitions,\n    fieldValues: fieldValues,\n    invalidFields: invalidFields,\n    submitInProgress: submitInProgress,\n    successfullySubmitted: successfullySubmitted,\n    handleFieldValueChanged: handleFieldValueChanged,\n    handleSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  })));\n};\n\nStickyDrawerWrapper.propTypes = {\n  showFormArea: PropTypes.bool\n};\nexport default StickyDrawerWrapper;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/LeadGenFormAndPanel/StickyDrawerWrapper.js"],"names":["React","useState","useEffect","PropTypes","StickyDrawerBottom","StickyDrawerSide","fieldDefinitions","interestDefinitions","GravityFormConstants","GetFieldsWithErrors","SubmitGravityForm","Variables","StickyDrawerWrapper","props","showFormArea","checkedInterests","setCheckedInterests","selectionIds","leadGen_interests_maintenance","leadGen_interests_hardware","leadGen_interests_consultation","leadGen_interests_imNotSure","fieldValues","setFieldValues","fieldIds","leadGen_firstName","leadGen_lastName","leadGen_companyName","leadGen_companyEmail","leadGen_phone","leadGen_tellUsAbout","invalidFields","setInvalidFields","successfullySubmitted","setSuccessfullySubmitted","submitInProgress","setSubmitInProgress","handleCheckedInterestsChanged","event","target","name","checked","handleFieldValueChanged","value","resetAllFields","getSelectedInterestsAsArray","selectedInterestsArray","interest","push","getValuesForForm","values","interests","leadGen_interests","fieldValue","handleSubmit","preventDefault","newInvalidFields","length","newCollection","invalidFieldIndex","invalidField","keyField","subscribeForm","document","querySelector","checkValidity","reportValidity","jsonObject","formIds","leadGen","processResults","results","success","clearSubmissionAfterTimer","console","error","errorMsg","alert","setTimeout","formResetDurationInMS","propTypes","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport StickyDrawerBottom from \"./StickyDrawerBottom\";\nimport StickyDrawerSide from \"./StickyDrawerSide\";\nimport fieldDefinitions from \"./FieldDefinitions\";\nimport interestDefinitions from \"./InterestDefinitions\";\nimport { GravityFormConstants } from '../../GravityFormsConstants';\nimport { GetFieldsWithErrors } from '../../utils/FormValidationHelpers';\nimport SubmitGravityForm from '../../utils/GravityFormsHelpers';\nimport Variables from '../../assets/scss/config/_variables.scss';\n\nconst StickyDrawerWrapper = props => {\n\tconst {\n\t\tshowFormArea\n\t} = props;\n\n\t// NOTE:: we must set initial values for checkboxes, otherwise we will receive an error stating:\n\t// \"A component is changing an uncontrolled input of type checkbox\"\n\t// ref: https://stackoverflow.com/a/53072573/18005\n\n\t// NOTE:: if these values change, must update resetAllFields() as well\n\tconst [checkedInterests, setCheckedInterests] = useState(\n\t\t{\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_maintenance]: false,\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_hardware]: false,\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_consultation]: false,\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_imNotSure]: false\n\t\t}\n\t);\n\n\t// NOTE:: if these values change, must update resetAllFields() as well\n\tconst [fieldValues, setFieldValues] = useState(\n\t\t{\n\t\t\t[GravityFormConstants.fieldIds.leadGen_firstName]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_lastName]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_companyName]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_companyEmail]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_phone]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_tellUsAbout]: ''\n\t\t}\n\t);\n\n\tconst [invalidFields, setInvalidFields] = useState({}); // stores field values (prefixed by tab) ex: `tab0_firstName`, `tab1_firstName`\n\tconst [successfullySubmitted, setSuccessfullySubmitted] = useState(false);\n\tconst [submitInProgress, setSubmitInProgress] = useState(false); // whether an async call to submit the form is in progress (for showing loader)\n\n\tconst handleCheckedInterestsChanged = (event) => {\n\t\tsetCheckedInterests({...checkedInterests, [event.target.name] : event.target.checked });\n\t}\n\n\tconst handleFieldValueChanged = (event) => {\n\t\tsetFieldValues({...fieldValues, [event.target.name] : event.target.value});\n\t}\n\n\tconst resetAllFields = () => {\n\t\tsetCheckedInterests({\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_maintenance]: false,\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_hardware]: false,\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_consultation]: false,\n\t\t\t[GravityFormConstants.selectionIds.leadGen_interests_imNotSure]: false\n\t\t});\n\t\tsetFieldValues({\n\t\t\t[GravityFormConstants.fieldIds.leadGen_firstName]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_lastName]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_companyName]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_companyEmail]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_phone]: '',\n\t\t\t[GravityFormConstants.fieldIds.leadGen_tellUsAbout]: ''\n\t\t});\n\t}\n\n\tconst getSelectedInterestsAsArray = () => {\n\t\tlet selectedInterestsArray = [];\n\t\tfor (var interest in checkedInterests) {\n\t\t\tif (checkedInterests[interest] === true) {\n\t\t\t\tselectedInterestsArray.push(interest);\n\t\t\t}\n\t\t}\n\t\treturn selectedInterestsArray;\n\t}\n\n\tconst getValuesForForm = () => {\n\t\tlet values = {};\n\n\t\t// set the value for the interest selections\n\t\tlet interests = getSelectedInterestsAsArray();\n\t\tvalues[GravityFormConstants.fieldIds.leadGen_interests] = interests;\n\n\t\t// iterate all the text fields and add them to our collection\n\t\tfor (var fieldValue in fieldValues) {\n\t\t\tvalues[fieldValue] = fieldValues[fieldValue];\n\t\t}\n\n\t\treturn values;\n\t}\n\n\tconst handleSubmit = (event) => {\n\t\t// console.log('handleSubmit');\n\t\tevent.preventDefault();\n\n\t\t// console.log('setSubmitInProgress = true');\n\t\tsetSubmitInProgress(true);\n\n\t\tlet newInvalidFields = GetFieldsWithErrors('#lead-gen-form');\n\t\tif (newInvalidFields && newInvalidFields.length > 0) {\n\t\t\tlet newCollection = {};\n\t\t\tfor (let invalidFieldIndex in newInvalidFields) {\n\t\t\t\tlet invalidField = newInvalidFields[invalidFieldIndex];\n\t\t\t\tlet keyField = invalidField.name;\n\t\t\t\tnewCollection[keyField] = 'error';\n\t\t\t}\n\t\t\tsetInvalidFields(newCollection);\n\t\t}\n\t\telse {\n\t\t\tsetInvalidFields({});\n\t\t}\n\n\t\tvar subscribeForm = document.querySelector('#lead-gen-form');\n\t\tif (!subscribeForm.checkValidity()) {\n\t\t\tsubscribeForm.reportValidity();\n\t\t\tsetSubmitInProgress(false);\n\t\t\treturn;\n\t\t}\n\n\t\tlet jsonObject = getValuesForForm();\n\t\t// console.log('jsonObject1', jsonObject);\n\t\tSubmitGravityForm(GravityFormConstants.formIds.leadGen, jsonObject, processResults);\n\t}\n\n\tconst processResults = async (results) => {\n\t\t// console.log('processResults setSubmitInProgress = false');\n\t\tsetSubmitInProgress(false);\n\n\t\tif (results.success) {\n\t\t\tsetSuccessfullySubmitted(true);\n\t\t\tclearSubmissionAfterTimer();\n\t\t}\n\t\telse {\n\t\t\tconsole.error('request error', results.errorMsg);\n\t\t\talert('Something went wrong. Please try again or give us a call at 877-227-0828.');\n\t\t}\n\t}\n\n\tconst clearSubmissionAfterTimer = () => {\n\t\tsetTimeout(function () {\n\t\t\tresetAllFields();\n\t\t\tsetSuccessfullySubmitted(false);\n\t\t}, Variables.formResetDurationInMS);\n\t}\n\n\t// fired when the selection of checked interests (on panel 1) changes\n\tuseEffect(() => {\n\t\t// console.log(\"checkedItems: \", checkedInterests)\n\t}, [checkedInterests]);\n\n\t// fired when the selection of checked interests (on panel 1) changes\n\tuseEffect(() => {\n\t\t// console.log(\"fieldValues: \", fieldValues)\n\t}, [fieldValues]);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"--desktop-only\">\n\t\t\t\t<StickyDrawerSide\n\t\t\t\t\tshowFormArea={showFormArea}\n\t\t\t\t\tinterestDefinitions={interestDefinitions}\n\t\t\t\t\tcheckedInterests={checkedInterests}\n\t\t\t\t\thandleCheckedInterestsChanged={handleCheckedInterestsChanged}\n\t\t\t\t\tfieldDefinitions={fieldDefinitions}\n\t\t\t\t\tfieldValues={fieldValues}\n\t\t\t\t\tinvalidFields={invalidFields}\n\t\t\t\t\tsubmitInProgress={submitInProgress}\n\t\t\t\t\tsuccessfullySubmitted={successfullySubmitted}\n\t\t\t\t\thandleFieldValueChanged={handleFieldValueChanged}\n\t\t\t\t\thandleSubmit={handleSubmit} />\n\t\t\t</div>\n\t\t\t<div className=\"--mobile-only sticky-drawer-bottom-wrapper\">\n\t\t\t\t<StickyDrawerBottom\n\t\t\t\t\tshowFormArea={showFormArea}\n\t\t\t\t\tinterestDefinitions={interestDefinitions}\n\t\t\t\t\tcheckedInterests={checkedInterests}\n\t\t\t\t\thandleCheckedInterestsChanged={handleCheckedInterestsChanged}\n\t\t\t\t\tfieldDefinitions={fieldDefinitions}\n\t\t\t\t\tfieldValues={fieldValues}\n\t\t\t\t\tinvalidFields={invalidFields}\n\t\t\t\t\tsubmitInProgress={submitInProgress}\n\t\t\t\t\tsuccessfullySubmitted={successfullySubmitted}\n\t\t\t\t\thandleFieldValueChanged={handleFieldValueChanged}\n\t\t\t\t\thandleSubmit={handleSubmit} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nStickyDrawerWrapper.propTypes = {\n\tshowFormArea: PropTypes.bool\n};\n\n\nexport default StickyDrawerWrapper;\n"]},"metadata":{},"sourceType":"module"}