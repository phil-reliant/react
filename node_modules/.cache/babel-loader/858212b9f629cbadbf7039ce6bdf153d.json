{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\Fields\\\\Multiselect.jsx\";\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nexport default (({\n  field,\n  value,\n  validationMessage,\n  touched,\n  setTouched,\n  updateForm,\n  hideField,\n  styledComponents,\n  error,\n  unsetError,\n  cssClass,\n  ...props\n}) => {\n  const {\n    id,\n    formId,\n    type,\n    label,\n    isRequired,\n    choices,\n    placeholder,\n    description,\n    descriptionPlacement,\n    labelPlacement,\n    width,\n    customName\n  } = field; // Map options\n\n  const options = choices.map(choice => ({\n    value: choice.value,\n    label: choice.text\n  }));\n  let preselected = choices.filter(choice => choice.isSelected);\n\n  if (preselected.length) {\n    preselected = [{\n      label: preselected[0].text,\n      value: preselected[0].value\n    }];\n  } else {\n    preselected = '';\n  } // Handle State\n\n\n  const [selectedOption, selectOption] = useState(value || preselected); // Handle change\n\n  const handleChange = option => {\n    selectOption(option);\n    const event = {\n      target: {\n        value: option\n      }\n    };\n    updateForm(event, field);\n    unsetError(id);\n  }; // Handle Blur\n\n\n  const handleBlur = () => {\n    const event = {\n      target: {\n        value: selectedOption\n      }\n    };\n    updateForm(event, field);\n    setTouched(id);\n  };\n\n  const {\n    SelectStyles,\n    Label = 'label',\n    Box = 'div'\n  } = styledComponents || false;\n  return /*#__PURE__*/React.createElement(Box, {\n    width: width,\n    className: validationMessage && touched || error ? `form-field error ${cssClass}` : `form-field ${cssClass}`,\n    style: {\n      display: hideField ? 'none' : undefined\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: `input_${formId}_${id}`,\n    className: `group-label ${labelPlacement}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, label, isRequired ? /*#__PURE__*/React.createElement(\"abbr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, \"*\") : null), descriptionPlacement === 'above' && description ? description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 26\n    }\n  }, description) : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    name: customName || `input_${id}[]`,\n    required: isRequired,\n    value: selectedOption,\n    onChange: option => {\n      handleChange(option, field);\n    },\n    onBlur: () => handleBlur(),\n    placeholder: placeholder,\n    options: options,\n    isMulti: true,\n    inputId: `input_${formId}_${id}`,\n    styles: SelectStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, description)), (validationMessage && touched || error) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-message\",\n    id: `error_${formId}_${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, validationMessage || error)));\n});","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/Fields/Multiselect.jsx"],"names":["React","useState","Select","field","value","validationMessage","touched","setTouched","updateForm","hideField","styledComponents","error","unsetError","cssClass","props","id","formId","type","label","isRequired","choices","placeholder","description","descriptionPlacement","labelPlacement","width","customName","options","map","choice","text","preselected","filter","isSelected","length","selectedOption","selectOption","handleChange","option","event","target","handleBlur","SelectStyles","Label","Box","display","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,gBAAe,CAAC;AACdC,EAAAA,KADc;AAEdC,EAAAA,KAFc;AAGdC,EAAAA,iBAHc;AAIdC,EAAAA,OAJc;AAKdC,EAAAA,UALc;AAMdC,EAAAA,UANc;AAOdC,EAAAA,SAPc;AAQdC,EAAAA,gBARc;AASdC,EAAAA,KATc;AAUdC,EAAAA,UAVc;AAWdC,EAAAA,QAXc;AAYd,KAAGC;AAZW,CAAD,KAaT;AACJ,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,WARI;AASJC,IAAAA,oBATI;AAUJC,IAAAA,cAVI;AAWJC,IAAAA,KAXI;AAYJC,IAAAA;AAZI,MAaFvB,KAbJ,CADI,CAeJ;;AACA,QAAMwB,OAAO,GAAGP,OAAO,CAACQ,GAAR,CAAYC,MAAM,KAAK;AACrCzB,IAAAA,KAAK,EAAEyB,MAAM,CAACzB,KADuB;AAErCc,IAAAA,KAAK,EAAEW,MAAM,CAACC;AAFuB,GAAL,CAAlB,CAAhB;AAIA,MAAIC,WAAW,GAAGX,OAAO,CAACY,MAAR,CAAeH,MAAM,IAAIA,MAAM,CAACI,UAAhC,CAAlB;;AACA,MAAIF,WAAW,CAACG,MAAhB,EAAwB;AACtBH,IAAAA,WAAW,GAAG,CACZ;AACEb,MAAAA,KAAK,EAAEa,WAAW,CAAC,CAAD,CAAX,CAAeD,IADxB;AAEE1B,MAAAA,KAAK,EAAE2B,WAAW,CAAC,CAAD,CAAX,CAAe3B;AAFxB,KADY,CAAd;AAMD,GAPD,MAOO;AACL2B,IAAAA,WAAW,GAAG,EAAd;AACD,GA9BG,CA+BJ;;;AACA,QAAM,CAACI,cAAD,EAAiBC,YAAjB,IAAiCnC,QAAQ,CAACG,KAAK,IAAI2B,WAAV,CAA/C,CAhCI,CAiCJ;;AACA,QAAMM,YAAY,GAAIC,MAAD,IAAY;AAC/BF,IAAAA,YAAY,CAACE,MAAD,CAAZ;AACA,UAAMC,KAAK,GAAG;AACZC,MAAAA,MAAM,EAAE;AACNpC,QAAAA,KAAK,EAAEkC;AADD;AADI,KAAd;AAKA9B,IAAAA,UAAU,CAAC+B,KAAD,EAAQpC,KAAR,CAAV;AACAS,IAAAA,UAAU,CAACG,EAAD,CAAV;AACD,GATD,CAlCI,CA4CJ;;;AACA,QAAM0B,UAAU,GAAG,MAAM;AACvB,UAAMF,KAAK,GAAG;AACZC,MAAAA,MAAM,EAAE;AACNpC,QAAAA,KAAK,EAAE+B;AADD;AADI,KAAd;AAKA3B,IAAAA,UAAU,CAAC+B,KAAD,EAAQpC,KAAR,CAAV;AACAI,IAAAA,UAAU,CAACQ,EAAD,CAAV;AACD,GARD;;AASA,QAAM;AAAE2B,IAAAA,YAAF;AAAgBC,IAAAA,KAAK,GAAG,OAAxB;AAAiCC,IAAAA,GAAG,GAAG;AAAvC,MAAiDlC,gBAAgB,IAAI,KAA3E;AACA,sBACE,oBAAC,GAAD;AACE,IAAA,KAAK,EAAEe,KADT;AAEE,IAAA,SAAS,EACNpB,iBAAiB,IAAIC,OAAtB,IAAkCK,KAAlC,GACK,oBAAmBE,QAAS,EADjC,GAEK,cAAaA,QAAS,EAL/B;AAOE,IAAA,KAAK,EAAE;AAAEgC,MAAAA,OAAO,EAAEpC,SAAS,GAAG,MAAH,GAAYqC;AAAhC,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE;AAAK,IAAA,SAAS,EAAE7B,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAG,SAAQD,MAAO,IAAGD,EAAG,EAAtC;AAAyC,IAAA,SAAS,EAAG,eAAcS,cAAe,EAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KADH,EAEGC,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,GAAoB,IAFjC,CADF,EAKGI,oBAAoB,KAAK,OAAzB,IAAoCD,WAApC,GACCA,WAAW,iBAAI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BA,WAA9B,CADhB,gBAGC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAEI,UAAU,IAAK,SAAQX,EAAG,IADlC;AAEE,IAAA,QAAQ,EAAEI,UAFZ;AAGE,IAAA,KAAK,EAAEgB,cAHT;AAIE,IAAA,QAAQ,EAAGG,MAAD,IAAY;AACpBD,MAAAA,YAAY,CAACC,MAAD,EAASnC,KAAT,CAAZ;AACD,KANH;AAOE,IAAA,MAAM,EAAE,MAAMsC,UAAU,EAP1B;AAQE,IAAA,WAAW,EAAEpB,WARf;AASE,IAAA,OAAO,EAAEM,OATX;AAUE,IAAA,OAAO,MAVT;AAWE,IAAA,OAAO,EAAG,SAAQX,MAAO,IAAGD,EAAG,EAXjC;AAYE,IAAA,MAAM,EAAE2B,YAZV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAeGpB,WAAW,iBAAI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BA,WAA9B,CAflB,CARJ,EA0BG,CAAEjB,iBAAiB,IAAIC,OAAtB,IAAkCK,KAAnC,kBACC;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAgC,IAAA,EAAE,EAAG,SAAQK,MAAO,IAAGD,EAAG,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,iBAAiB,IAAIM,KADxB,CA3BJ,CATF,CADF;AA4CD,CAhHD","sourcesContent":["import React, { useState } from 'react';\nimport Select from 'react-select';\n\nexport default ({\n  field,\n  value,\n  validationMessage,\n  touched,\n  setTouched,\n  updateForm,\n  hideField,\n  styledComponents,\n  error,\n  unsetError,\n  cssClass,\n  ...props\n}) => {\n  const {\n    id,\n    formId,\n    type,\n    label,\n    isRequired,\n    choices,\n    placeholder,\n    description,\n    descriptionPlacement,\n    labelPlacement,\n    width,\n    customName,\n  } = field;\n  // Map options\n  const options = choices.map(choice => ({\n    value: choice.value,\n    label: choice.text,\n  }));\n  let preselected = choices.filter(choice => choice.isSelected);\n  if (preselected.length) {\n    preselected = [\n      {\n        label: preselected[0].text,\n        value: preselected[0].value,\n      },\n    ];\n  } else {\n    preselected = '';\n  }\n  // Handle State\n  const [selectedOption, selectOption] = useState(value || preselected);\n  // Handle change\n  const handleChange = (option) => {\n    selectOption(option);\n    const event = {\n      target: {\n        value: option,\n      },\n    };\n    updateForm(event, field);\n    unsetError(id);\n  };\n  // Handle Blur\n  const handleBlur = () => {\n    const event = {\n      target: {\n        value: selectedOption,\n      },\n    };\n    updateForm(event, field);\n    setTouched(id);\n  };\n  const { SelectStyles, Label = 'label', Box = 'div' } = styledComponents || false;\n  return (\n    <Box\n      width={width}\n      className={\n        (validationMessage && touched) || error\n          ? `form-field error ${cssClass}`\n          : `form-field ${cssClass}`\n      }\n      style={{ display: hideField ? 'none' : undefined }}\n    >\n      <div className={type}>\n        <Label htmlFor={`input_${formId}_${id}`} className={`group-label ${labelPlacement}`}>\n          {label}\n          {isRequired ? <abbr>*</abbr> : null}\n        </Label>\n        {descriptionPlacement === 'above' && description ? (\n          description && <div className=\"description\">{description}</div>\n        ) : (\n          <React.Fragment>\n            <Select\n              name={customName || `input_${id}[]`}\n              required={isRequired}\n              value={selectedOption}\n              onChange={(option) => {\n                handleChange(option, field);\n              }}\n              onBlur={() => handleBlur()}\n              placeholder={placeholder}\n              options={options}\n              isMulti\n              inputId={`input_${formId}_${id}`}\n              styles={SelectStyles}\n            />\n            {description && <div className=\"description\">{description}</div>}\n          </React.Fragment>\n        )}\n        {((validationMessage && touched) || error) && (\n          <span className=\"error-message\" id={`error_${formId}_${id}`}>\n            {validationMessage || error}\n          </span>\n        )}\n      </div>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}