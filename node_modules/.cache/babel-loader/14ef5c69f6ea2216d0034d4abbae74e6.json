{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\FlexibleContent\\\\VideoPlayer.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrowNoStem from '../../assets/svgs/arrow-no-stem';\nimport YouTube from 'react-youtube';\nimport { GetYoutubeID } from '../../utils/YouTubeHelpers';\n\nconst VideoPlayer = props => {\n  const {\n    sectionTitle,\n    youtubeUrl,\n    imageOverlay\n  } = props;\n  const [showPlayer, setShowPlayer] = useState(false);\n  const ytOptions = {}; // in case we ever need to provide youtube options for the embed\n  // where we will store the YouTube player reference once it's ready\n\n  let ytPlayerRef = null;\n\n  const showAndPlayVideo = youtubeID => {\n    if (ytPlayerRef) {\n      setShowPlayer(true);\n      ytPlayerRef.playVideo();\n    }\n  };\n\n  const playerReady = event => {\n    // when the player is ready we store off the reference to the player so we can play it when needed\n    ytPlayerRef = event.target;\n  }; // If we can't parse the YouTube Video ID then we won't show the image, we will show an overt error\n\n\n  const ytVideoID = GetYoutubeID(youtubeUrl);\n\n  if (!ytVideoID) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `video-player`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 8\n      }\n    }, \"Invalid YouTube URL: \", youtubeUrl)))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `video-player`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }\n  }, sectionTitle ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 8\n    }\n  }, sectionTitle)))) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centered row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `video-player__embed-area`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, imageOverlay && imageOverlay.mediaItemUrl ? /*#__PURE__*/React.createElement(\"img\", {\n    id: \"videoImageOverlay\",\n    className: showPlayer ? `hide` : ``,\n    src: imageOverlay.mediaItemUrl,\n    alt: imageOverlay.altText,\n    onClick: showAndPlayVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: `video-player__embed-area__arrows`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: showAndPlayVideo,\n    className: `arrow-right ${showPlayer ? `hide` : ``}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ArrowNoStem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `video-player__embed-area__video ${showPlayer ? `` : `hide`}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 8\n    }\n  }, ytVideoID ? /*#__PURE__*/React.createElement(YouTube, {\n    id: ytVideoID,\n    className: \"video-player__embed-area__video__ytembed\",\n    videoId: ytVideoID,\n    opts: ytOptions,\n    onReady: playerReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 10\n    }\n  }, \"Invalid YouTube URL\")))))));\n};\n\nVideoPlayer.propTypes = {\n  sectionTitle: PropTypes.string,\n  youtubeUrl: PropTypes.string.isRequired,\n  imageOverlay: PropTypes.object.isRequired\n};\nexport default VideoPlayer;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/FlexibleContent/VideoPlayer.js"],"names":["React","useState","PropTypes","ArrowNoStem","YouTube","GetYoutubeID","VideoPlayer","props","sectionTitle","youtubeUrl","imageOverlay","showPlayer","setShowPlayer","ytOptions","ytPlayerRef","showAndPlayVideo","youtubeID","playVideo","playerReady","event","target","ytVideoID","mediaItemUrl","altText","propTypes","string","isRequired","object"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrowNoStem from '../../assets/svgs/arrow-no-stem';\nimport YouTube from 'react-youtube';\nimport { GetYoutubeID } from '../../utils/YouTubeHelpers';\n\nconst VideoPlayer = props => {\n\tconst {\n\t\tsectionTitle,\n\t\tyoutubeUrl,\n\t\timageOverlay\n\t} = props;\n\n\tconst [ showPlayer, setShowPlayer ] = useState(false);\n\tconst ytOptions = { }; // in case we ever need to provide youtube options for the embed\n\n\t// where we will store the YouTube player reference once it's ready\n\tlet ytPlayerRef = null;\n\n\tconst showAndPlayVideo = (youtubeID) => {\n\t\tif (ytPlayerRef) {\n\t\t\tsetShowPlayer(true);\n\t\t\tytPlayerRef.playVideo();\n\t\t}\n\t}\n\n\tconst playerReady = (event) => {\n\t\t// when the player is ready we store off the reference to the player so we can play it when needed\n\t\tytPlayerRef = event.target;\n\t}\n\n\t// If we can't parse the YouTube Video ID then we won't show the image, we will show an overt error\n\tconst ytVideoID = GetYoutubeID(youtubeUrl);\n\tif (!ytVideoID) {\n\t\treturn (\n\t\t\t<div className={`video-player`}>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t<div className=\"error\">Invalid YouTube URL: {youtubeUrl}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className={`video-player`}>\n\t\t\t{ sectionTitle ?\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t<h4>{sectionTitle}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t: null}\n\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"centered row\">\n\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t<div className={`video-player__embed-area`}>\n\t\t\t\t\t\t\t{ (imageOverlay && imageOverlay.mediaItemUrl) ?\n\t\t\t\t\t\t\t\t<img id=\"videoImageOverlay\"\n\t\t\t\t\t\t\t\t\tclassName={showPlayer ? `hide` : ``}\n\t\t\t\t\t\t\t\t\tsrc={imageOverlay.mediaItemUrl}\n\t\t\t\t\t\t\t\t\talt={imageOverlay.altText}\n\t\t\t\t\t\t\t\t\tonClick={showAndPlayVideo} />\n\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<div className={`video-player__embed-area__arrows`}>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={showAndPlayVideo}\n\t\t\t\t\t\t\t\t\tclassName={`arrow-right ${showPlayer ? `hide` : ``}`}>\n\t\t\t\t\t\t\t\t\t<ArrowNoStem />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className={`video-player__embed-area__video ${showPlayer ? `` : `hide`}`}>\n\t\t\t\t\t\t\t\t{ (ytVideoID) ?\n\t\t\t\t\t\t\t\t\t<YouTube\n\t\t\t\t\t\t\t\t\t\tid={ytVideoID}\n\t\t\t\t\t\t\t\t\t\tclassName='video-player__embed-area__video__ytembed'\n\t\t\t\t\t\t\t\t\t\tvideoId={ytVideoID}\n\t\t\t\t\t\t\t\t\t\topts={ytOptions}\n\t\t\t\t\t\t\t\t\t\tonReady={playerReady}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<div>Invalid YouTube URL</div>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nVideoPlayer.propTypes = {\n\tsectionTitle: PropTypes.string,\n\tyoutubeUrl: PropTypes.string.isRequired,\n\timageOverlay: PropTypes.object.isRequired\n};\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}