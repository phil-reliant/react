{"ast":null,"code":"import { UnescapeText } from './TextHelpers'; // This method will take a categories response from GraphQL and return it as a comma seperated string of categories\n\nexport const CategoriesToString = categories => {\n  let categoryNames = [];\n\n  if (categories && categories.edges && categories.edges.length > 0) {\n    for (let categoryIndex in categories.edges) {\n      let category = categories.edges[categoryIndex];\n      categoryNames.push(UnescapeText(category.node.name));\n    }\n  } else if (categories && categories.nodes && categories.nodes.length > 0) {\n    for (let categoryIndex in categories.nodes) {\n      let category = categories.nodes[categoryIndex];\n      categoryNames.push(UnescapeText(category.name));\n    }\n  }\n\n  return categoryNames.join(', ');\n};\nexport const GetCategoryFriendlyName = (categories, slug) => {\n  for (let categoryIndex in categories.edges) {\n    let category = categories.edges[categoryIndex];\n\n    if (category.node.slug === slug) {\n      return UnescapeText(category.node.name);\n    }\n  }\n\n  console.error('GetCategoryFriendlyName was unable to find a matching slug!');\n  return slug;\n};\nexport const GetFirstCategory = categories => {\n  // console.log('GetFirstCategory categories', categories);\n  let firstCategory = null;\n\n  if (categories) {\n    if (categories.edges && categories.edges.length > 0) {\n      firstCategory = categories.edges[0];\n    } else if (categories.nodes && categories.nodes.length > 0) {\n      firstCategory = categories.nodes[0];\n    }\n  } // console.log('GetFirstCategory firstCategory', firstCategory);\n\n\n  return firstCategory;\n};\nexport const GetFirstCategoryName = categories => {\n  // console.log('GetFirstCategoryName categories', categories);\n  let firstCategory = GetFirstCategory(categories);\n\n  if (firstCategory === null) {\n    return null;\n  } // console.log('GetFirstCategoryName firstCategory.name', firstCategory.node.name);\n\n\n  return firstCategory.node.name;\n};","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/utils/CategoryHelpers.js"],"names":["UnescapeText","CategoriesToString","categories","categoryNames","edges","length","categoryIndex","category","push","node","name","nodes","join","GetCategoryFriendlyName","slug","console","error","GetFirstCategory","firstCategory","GetFirstCategoryName"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B,C,CAEA;;AACA,OAAO,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;AACjD,MAAIC,aAAa,GAAG,EAApB;;AAEA,MAAID,UAAU,IAAIA,UAAU,CAACE,KAAzB,IAAkCF,UAAU,CAACE,KAAX,CAAiBC,MAAjB,GAA0B,CAAhE,EAAmE;AAClE,SAAK,IAAIC,aAAT,IAA0BJ,UAAU,CAACE,KAArC,EAA4C;AAC3C,UAAIG,QAAQ,GAAGL,UAAU,CAACE,KAAX,CAAiBE,aAAjB,CAAf;AACAH,MAAAA,aAAa,CAACK,IAAd,CAAmBR,YAAY,CAACO,QAAQ,CAACE,IAAT,CAAcC,IAAf,CAA/B;AACA;AACD,GALD,MAMK,IAAIR,UAAU,IAAIA,UAAU,CAACS,KAAzB,IAAkCT,UAAU,CAACS,KAAX,CAAiBN,MAAjB,GAA0B,CAAhE,EAAmE;AACvE,SAAK,IAAIC,aAAT,IAA0BJ,UAAU,CAACS,KAArC,EAA4C;AAC3C,UAAIJ,QAAQ,GAAGL,UAAU,CAACS,KAAX,CAAiBL,aAAjB,CAAf;AACAH,MAAAA,aAAa,CAACK,IAAd,CAAmBR,YAAY,CAACO,QAAQ,CAACG,IAAV,CAA/B;AACA;AACD;;AAED,SAAOP,aAAa,CAACS,IAAd,CAAmB,IAAnB,CAAP;AACA,CAjBM;AAmBP,OAAO,MAAMC,uBAAuB,GAAG,CAACX,UAAD,EAAaY,IAAb,KAAsB;AAC5D,OAAK,IAAIR,aAAT,IAA0BJ,UAAU,CAACE,KAArC,EAA4C;AAC3C,QAAIG,QAAQ,GAAGL,UAAU,CAACE,KAAX,CAAiBE,aAAjB,CAAf;;AACA,QAAIC,QAAQ,CAACE,IAAT,CAAcK,IAAd,KAAuBA,IAA3B,EAAiC;AAChC,aAAOd,YAAY,CAACO,QAAQ,CAACE,IAAT,CAAcC,IAAf,CAAnB;AACA;AACD;;AAEDK,EAAAA,OAAO,CAACC,KAAR,CAAc,6DAAd;AACA,SAAOF,IAAP;AACA,CAVM;AAYP,OAAO,MAAMG,gBAAgB,GAAIf,UAAD,IAAgB;AAC/C;AAEA,MAAIgB,aAAa,GAAG,IAApB;;AACA,MAAIhB,UAAJ,EAAgB;AACf,QAAIA,UAAU,CAACE,KAAX,IAAoBF,UAAU,CAACE,KAAX,CAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;AACpDa,MAAAA,aAAa,GAAGhB,UAAU,CAACE,KAAX,CAAiB,CAAjB,CAAhB;AACA,KAFD,MAEO,IAAIF,UAAU,CAACS,KAAX,IAAoBT,UAAU,CAACS,KAAX,CAAiBN,MAAjB,GAA0B,CAAlD,EAAqD;AAC3Da,MAAAA,aAAa,GAAGhB,UAAU,CAACS,KAAX,CAAiB,CAAjB,CAAhB;AACA;AACD,GAV8C,CAY/C;;;AACA,SAAOO,aAAP;AACA,CAdM;AAgBP,OAAO,MAAMC,oBAAoB,GAAIjB,UAAD,IAAgB;AACnD;AACA,MAAIgB,aAAa,GAAGD,gBAAgB,CAACf,UAAD,CAApC;;AACA,MAAIgB,aAAa,KAAK,IAAtB,EAA4B;AAC3B,WAAO,IAAP;AACA,GALkD,CAOnD;;;AACA,SAAOA,aAAa,CAACT,IAAd,CAAmBC,IAA1B;AACA,CATM","sourcesContent":["import { UnescapeText } from './TextHelpers';\n\n// This method will take a categories response from GraphQL and return it as a comma seperated string of categories\nexport const CategoriesToString = (categories) => {\n\tlet categoryNames = [];\n\n\tif (categories && categories.edges && categories.edges.length > 0) {\n\t\tfor (let categoryIndex in categories.edges) {\n\t\t\tlet category = categories.edges[categoryIndex];\n\t\t\tcategoryNames.push(UnescapeText(category.node.name));\n\t\t}\n\t}\n\telse if (categories && categories.nodes && categories.nodes.length > 0) {\n\t\tfor (let categoryIndex in categories.nodes) {\n\t\t\tlet category = categories.nodes[categoryIndex];\n\t\t\tcategoryNames.push(UnescapeText(category.name));\n\t\t}\n\t}\n\n\treturn categoryNames.join(', ');\n}\n\nexport const GetCategoryFriendlyName = (categories, slug) => {\n\tfor (let categoryIndex in categories.edges) {\n\t\tlet category = categories.edges[categoryIndex];\n\t\tif (category.node.slug === slug) {\n\t\t\treturn UnescapeText(category.node.name);\n\t\t}\n\t}\n\n\tconsole.error('GetCategoryFriendlyName was unable to find a matching slug!');\n\treturn slug;\n}\n\nexport const GetFirstCategory = (categories) => {\n\t// console.log('GetFirstCategory categories', categories);\n\n\tlet firstCategory = null;\n\tif (categories) {\n\t\tif (categories.edges && categories.edges.length > 0) {\n\t\t\tfirstCategory = categories.edges[0];\n\t\t} else if (categories.nodes && categories.nodes.length > 0) {\n\t\t\tfirstCategory = categories.nodes[0];\n\t\t}\n\t}\n\n\t// console.log('GetFirstCategory firstCategory', firstCategory);\n\treturn firstCategory;\n}\n\nexport const GetFirstCategoryName = (categories) => {\n\t// console.log('GetFirstCategoryName categories', categories);\n\tlet firstCategory = GetFirstCategory(categories);\n\tif (firstCategory === null) {\n\t\treturn null;\n\t}\n\n\t// console.log('GetFirstCategoryName firstCategory.name', firstCategory.node.name);\n\treturn firstCategory.node.name;\n}\n"]},"metadata":{},"sourceType":"module"}