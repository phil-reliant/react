{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\FormElements\\\\RenderField.jsx\";\nimport React, { useState } from 'react';\nimport * as FormFields from '../Fields';\n\nconst frac2dec = fraction => {\n  /* assumes fraction is in the form  1-1/2 or 1 1/2 */\n\n  /* doesn't work on negative numbers */\n  let fractionParts = fraction.split('-');\n\n  if (fractionParts.length === 1) {\n    /* try space as divider */\n    fractionParts = fraction.split(' ');\n  }\n\n  if (fractionParts.length > 1 && fraction.indexOf('/') !== -1) {\n    const integer = parseInt(fractionParts[0]);\n    const decimalParts = fractionParts[1].split('/');\n    const decimal = parseInt(decimalParts[0]) / parseInt(decimalParts[1]);\n    return integer + decimal;\n  }\n\n  if (fraction.indexOf('/') !== -1) {\n    const decimalParts = fraction.split('/');\n    const decimal = parseInt(decimalParts[0]) / parseInt(decimalParts[1]);\n    return decimal;\n  }\n\n  return parseInt(fraction);\n};\n\nconst formatComponentName = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nconst formatWidthFromCss = cssClass => {\n  if (!cssClass) return {};\n  const widthStarts = cssClass.indexOf('[');\n  const widthEnds = cssClass.indexOf(']');\n\n  if (widthStarts === -1 || widthEnds === -1) {\n    return {};\n  }\n\n  const width = cssClass.substring(widthStarts + 1, widthEnds).split(',').map(item => frac2dec(item.replace(/\\s/g, '')));\n  const cleanedCssClass = `${cssClass.replace(cssClass.substring(widthStarts, widthEnds + 1), '')} custom-width`;\n  return {\n    width,\n    cleanedCssClass\n  };\n};\n\nconst RenderField = ({\n  field,\n  formValues,\n  submitFailed,\n  submitSuccess,\n  setTouched,\n  touched,\n  updateForm,\n  pages,\n  prevStep,\n  nextStep,\n  isNextDisabled,\n  saveStateToHtmlField,\n  styledComponents,\n  customComponents,\n  error,\n  unsetError,\n  dropzoneText\n}) => {\n  const FormComponent = FormFields[formatComponentName(field.type)];\n  const {\n    cleanedCssClass,\n    width\n  } = formatWidthFromCss(field.cssClass);\n\n  if (width) {\n    field.cssClass = cleanedCssClass;\n    field.width = width;\n  }\n\n  const value = formValues[field.id] ? formValues[field.id].value : field.defaultValue;\n  const [fieldClassName, setFieldClassName] = useState(`${field.cssClass}${value && value !== '' ? 'filled' : ''}`);\n  const [currentFocus, setCurrentFocusClass] = useState(false);\n\n  const setFocusClass = action => {\n    if (action) {\n      if (fieldClassName.indexOf(' filled') === -1) {\n        setFieldClassName(`${fieldClassName} filled`);\n      }\n    } else {\n      setFieldClassName(fieldClassName.replace(' filled', ''));\n    }\n  };\n\n  const setCurrentFocus = action => {\n    setCurrentFocusClass(action);\n  };\n\n  return /*#__PURE__*/React.createElement(FormComponent, {\n    key: field.id,\n    field: field,\n    value: value,\n    updateForm: (event, field) => updateForm(event, field),\n    validationMessage: formValues[field.id] ? formValues[field.id].valid : false,\n    submitFailed: submitFailed,\n    submitSuccess: submitSuccess,\n    touched: touched[field.id],\n    setTouched: setTouched,\n    unsetError: unsetError,\n    error: error,\n    pages: pages,\n    prevStep: prevStep,\n    nextStep: nextStep,\n    isNextDisabled: isNextDisabled,\n    hideField: formValues[field.id] ? formValues[field.id].hideField : false,\n    saveStateToHtmlField: field.type === 'html' && field.cssClass.indexOf('set-state') !== -1 ? {\n      formValues,\n      saveStateToHtmlField\n    } : false,\n    styledComponents: styledComponents,\n    cssClass: `${fieldClassName} ${currentFocus ? 'focused' : ''}`,\n    setFocusClass: setFocusClass,\n    setCurrentFocus: setCurrentFocus,\n    component: customComponents && customComponents[field.id],\n    dropzoneText: dropzoneText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default RenderField;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/FormElements/RenderField.jsx"],"names":["React","useState","FormFields","frac2dec","fraction","fractionParts","split","length","indexOf","integer","parseInt","decimalParts","decimal","formatComponentName","string","charAt","toUpperCase","slice","formatWidthFromCss","cssClass","widthStarts","widthEnds","width","substring","map","item","replace","cleanedCssClass","RenderField","field","formValues","submitFailed","submitSuccess","setTouched","touched","updateForm","pages","prevStep","nextStep","isNextDisabled","saveStateToHtmlField","styledComponents","customComponents","error","unsetError","dropzoneText","FormComponent","type","value","id","defaultValue","fieldClassName","setFieldClassName","currentFocus","setCurrentFocusClass","setFocusClass","action","setCurrentFocus","event","valid","hideField"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as FormFields from '../Fields';\n\nconst frac2dec = (fraction) => {\n  /* assumes fraction is in the form  1-1/2 or 1 1/2 */\n  /* doesn't work on negative numbers */\n  let fractionParts = fraction.split('-');\n  if (fractionParts.length === 1) {\n    /* try space as divider */\n    fractionParts = fraction.split(' ');\n  }\n\n  if (fractionParts.length > 1 && fraction.indexOf('/') !== -1) {\n    const integer = parseInt(fractionParts[0]);\n    const decimalParts = fractionParts[1].split('/');\n    const decimal = parseInt(decimalParts[0]) / parseInt(decimalParts[1]);\n\n    return integer + decimal;\n  }\n  if (fraction.indexOf('/') !== -1) {\n    const decimalParts = fraction.split('/');\n    const decimal = parseInt(decimalParts[0]) / parseInt(decimalParts[1]);\n    return decimal;\n  }\n  return parseInt(fraction);\n};\n\nconst formatComponentName = string => string.charAt(0).toUpperCase() + string.slice(1);\nconst formatWidthFromCss = (cssClass) => {\n  if (!cssClass) return {};\n  const widthStarts = cssClass.indexOf('[');\n  const widthEnds = cssClass.indexOf(']');\n\n  if (widthStarts === -1 || widthEnds === -1) {\n    return {};\n  }\n\n  const width = cssClass\n    .substring(widthStarts + 1, widthEnds)\n    .split(',')\n    .map(item => frac2dec(item.replace(/\\s/g, '')));\n\n  const cleanedCssClass = `${cssClass.replace(\n    cssClass.substring(widthStarts, widthEnds + 1),\n    '',\n  )} custom-width`;\n\n  return {\n    width,\n    cleanedCssClass,\n  };\n};\n\nconst RenderField = ({\n  field,\n  formValues,\n  submitFailed,\n  submitSuccess,\n  setTouched,\n  touched,\n  updateForm,\n  pages,\n  prevStep,\n  nextStep,\n  isNextDisabled,\n  saveStateToHtmlField,\n  styledComponents,\n  customComponents,\n  error,\n  unsetError,\n  dropzoneText,\n}) => {\n  const FormComponent = FormFields[formatComponentName(field.type)];\n  const { cleanedCssClass, width } = formatWidthFromCss(field.cssClass);\n  if (width) {\n    field.cssClass = cleanedCssClass;\n    field.width = width;\n  }\n  const value = formValues[field.id] ? formValues[field.id].value : field.defaultValue;\n  const [fieldClassName, setFieldClassName] = useState(\n    `${field.cssClass}${value && value !== '' ? 'filled' : ''}`,\n  );\n  const [currentFocus, setCurrentFocusClass] = useState(false);\n\n  const setFocusClass = (action) => {\n    if (action) {\n      if (fieldClassName.indexOf(' filled') === -1) {\n        setFieldClassName(`${fieldClassName} filled`);\n      }\n    } else {\n      setFieldClassName(fieldClassName.replace(' filled', ''));\n    }\n  };\n  const setCurrentFocus = (action) => {\n    setCurrentFocusClass(action);\n  };\n\n  return (\n    <FormComponent\n      key={field.id}\n      field={field}\n      value={value}\n      updateForm={(event, field) => updateForm(event, field)}\n      validationMessage={formValues[field.id] ? formValues[field.id].valid : false}\n      submitFailed={submitFailed}\n      submitSuccess={submitSuccess}\n      touched={touched[field.id]}\n      setTouched={setTouched}\n      unsetError={unsetError}\n      error={error}\n      pages={pages}\n      prevStep={prevStep}\n      nextStep={nextStep}\n      isNextDisabled={isNextDisabled}\n      hideField={formValues[field.id] ? formValues[field.id].hideField : false}\n      saveStateToHtmlField={\n        field.type === 'html' && field.cssClass.indexOf('set-state') !== -1\n          ? { formValues, saveStateToHtmlField }\n          : false\n      }\n      styledComponents={styledComponents}\n      cssClass={`${fieldClassName} ${currentFocus ? 'focused' : ''}`}\n      setFocusClass={setFocusClass}\n      setCurrentFocus={setCurrentFocus}\n      component={customComponents && customComponents[field.id]}\n      dropzoneText={dropzoneText}\n    />\n  );\n};\n\nexport default RenderField;\n"]},"metadata":{},"sourceType":"module"}