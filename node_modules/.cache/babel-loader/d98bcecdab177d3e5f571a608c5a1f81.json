{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\Fields\\\\Date.jsx\";\nimport React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\nexport default (({\n  field,\n  value,\n  validationMessage,\n  touched,\n  setTouched,\n  hideField,\n  updateForm,\n  styledComponents,\n  error,\n  unsetError,\n  setFocusClass,\n  cssClass\n}) => {\n  const {\n    id,\n    formId,\n    type,\n    label,\n    placeholder,\n    isRequired,\n    description,\n    descriptionPlacement,\n    labelPlacement,\n    width,\n    inputs,\n    customName,\n    dateType,\n    dateFormat,\n    defaultValue,\n    datepickerOptions\n  } = field;\n  const {\n    Input = 'input',\n    Label = 'label',\n    Box = 'div',\n    DatePicker: SdatePicker = 'div'\n  } = styledComponents || false; // conver date format\n\n  const format = dateFormat && dateFormat === 'dmy' ? 'dd/MM/yyyy' : false;\n  let selectedValue = defaultValue ? new Date(defaultValue) : false;\n\n  if (format && defaultValue) {\n    const dateParts = defaultValue.split('/');\n    const dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    selectedValue = dateObject;\n  }\n\n  const [startDate, setDate] = useState(selectedValue);\n\n  const getFormattedInputs = items => {\n    if (dateType && dateType === 'datefield') {\n      // 0 - MM\n      // 1 - DD\n      // 2 - YYYY\n      switch (dateFormat) {\n        case 'dmy':\n        case 'dmy_dash':\n        case 'dmy_dot':\n          return [items[1], items[0], items[2]];\n\n        case 'ymd_slash':\n        case 'ymd_dash':\n        case 'ymd_dot':\n          return [items[2], items[0], items[1]];\n\n        default:\n          return items;\n      }\n    }\n\n    return items;\n  };\n\n  const formatedInputs = getFormattedInputs(inputs);\n\n  const adjustDatePickerOptions = options => {\n    if (dateType && dateType === 'datepicker' && options) {\n      const keys = Object.keys(options);\n\n      if (keys && keys.length > 0) {\n        for (let i = 0; i < keys.length; i++) {\n          if (keys[i] === 'minDate' || keys[i] === 'maxDate') {\n            options[keys[i]] = new Date(options[keys[i]]);\n          }\n        }\n      }\n    }\n\n    return options;\n  };\n\n  const dateOptions = adjustDatePickerOptions(datepickerOptions) || {};\n  return /*#__PURE__*/React.createElement(Box, {\n    width: width,\n    className: validationMessage && touched || error ? `form-field error ${cssClass}` : `form-field ${cssClass}`,\n    style: {\n      display: hideField ? 'none' : undefined\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: `input_${formId}_${id}`,\n    className: `gf-label ${labelPlacement}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, label, isRequired ? /*#__PURE__*/React.createElement(\"abbr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 23\n    }\n  }, \"*\") : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, descriptionPlacement === 'above' && description ? description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 26\n    }\n  }, description) : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, dateType && dateType === 'datepicker' ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SdatePicker, {\n    className: \"ginput_container ginput_container_date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, Object.assign({\n    name: `input_${id}`,\n    id: `input_${formId}_25_${id}`,\n    type: \"text\",\n    className: \"datepicker hasDatepicker\",\n    selected: startDate,\n    onChange: date => {\n      setDate(date);\n      updateForm({\n        target: {\n          value: date\n        }\n      }, field);\n      setTouched(id);\n      unsetError(id);\n      setFocusClass(date);\n    },\n    onBlur: e => {\n      updateForm({\n        target: {\n          value: startDate\n        }\n      }, field);\n      setTouched(id);\n      unsetError(id);\n      setFocusClass(startDate);\n    },\n    dateFormat: format || undefined,\n    onFocus: () => setFocusClass(true),\n    required: isRequired,\n    placeholderText: placeholder\n  }, dateOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }))), (validationMessage && touched || error) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-message\",\n    id: `error_${formId}_${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 19\n    }\n  }, validationMessage || error)) : /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, formatedInputs && formatedInputs.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: type,\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: `input_${formId}_${id}_${index}`,\n    type: \"number\",\n    name: customName || `input_${id}[]`,\n    placeholder: item.placeholder,\n    step: \"1\",\n    min: \"1\",\n    max: item.label === 'MM' ? 12 : item.label === 'DD' ? 31 : new Date().getFullYear() + 1,\n    maxLength: item.label === 'YYYY' ? 4 : 2,\n    value: item.value,\n    onBlur: event => {\n      field.subId = index;\n      field.dateLabel = item.label;\n      updateForm(event, field);\n      setTouched(id);\n      unsetError(id);\n      setFocusClass(item.value !== '');\n    },\n    onFocus: () => setFocusClass(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: `input_${formId}_${id}_${index}`,\n    className: \"hide-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 23\n    }\n  }, item.label), validationMessage && touched && validationMessage[index] && index === validationMessage[index].index && validationMessage[index].message && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-message\",\n    id: `error_${formId}_${item.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 27\n    }\n  }, validationMessage[index].message), error && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }, error))), description && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 33\n    }\n  }, description)))));\n});","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/Fields/Date.jsx"],"names":["React","useState","DatePicker","field","value","validationMessage","touched","setTouched","hideField","updateForm","styledComponents","error","unsetError","setFocusClass","cssClass","id","formId","type","label","placeholder","isRequired","description","descriptionPlacement","labelPlacement","width","inputs","customName","dateType","dateFormat","defaultValue","datepickerOptions","Input","Label","Box","SdatePicker","format","selectedValue","Date","dateParts","split","dateObject","startDate","setDate","getFormattedInputs","items","formatedInputs","adjustDatePickerOptions","options","keys","Object","length","i","dateOptions","display","undefined","date","target","e","map","item","index","getFullYear","event","subId","dateLabel","message"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DatePicker from 'react-datepicker';\n\nexport default ({\n  field,\n  value,\n  validationMessage,\n  touched,\n  setTouched,\n  hideField,\n  updateForm,\n  styledComponents,\n  error,\n  unsetError,\n  setFocusClass,\n  cssClass,\n}) => {\n  const {\n    id,\n    formId,\n    type,\n    label,\n    placeholder,\n    isRequired,\n    description,\n    descriptionPlacement,\n    labelPlacement,\n    width,\n    inputs,\n    customName,\n    dateType,\n    dateFormat,\n    defaultValue,\n    datepickerOptions,\n  } = field;\n\n  const { Input = 'input', Label = 'label', Box = 'div', DatePicker: SdatePicker = 'div' } =\n    styledComponents || false;\n\n  // conver date format\n  const format = dateFormat && dateFormat === 'dmy' ? 'dd/MM/yyyy' : false;\n  let selectedValue = defaultValue ? new Date(defaultValue) : false;\n  if (format && defaultValue) {\n    const dateParts = defaultValue.split('/');\n    const dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    selectedValue = dateObject;\n  }\n\n  const [startDate, setDate] = useState(selectedValue);\n\n  const getFormattedInputs = (items) => {\n    if (dateType && dateType === 'datefield') {\n      // 0 - MM\n      // 1 - DD\n      // 2 - YYYY\n      switch (dateFormat) {\n        case 'dmy':\n        case 'dmy_dash':\n        case 'dmy_dot':\n          return [items[1], items[0], items[2]];\n        case 'ymd_slash':\n        case 'ymd_dash':\n        case 'ymd_dot':\n          return [items[2], items[0], items[1]];\n        default:\n          return items;\n      }\n    }\n    return items;\n  };\n\n  const formatedInputs = getFormattedInputs(inputs);\n\n  const adjustDatePickerOptions = (options) => {\n    if (dateType && dateType === 'datepicker' && options) {\n      const keys = Object.keys(options);\n      if (keys && keys.length > 0) {\n        for (let i = 0; i < keys.length; i++) {\n          if (keys[i] === 'minDate' || keys[i] === 'maxDate') {\n            options[keys[i]] = new Date(options[keys[i]]);\n          }\n        }\n      }\n    }\n    return options;\n  };\n  const dateOptions = adjustDatePickerOptions(datepickerOptions) || {};\n\n  return (\n    <Box\n      width={width}\n      className={\n        (validationMessage && touched) || error\n          ? `form-field error ${cssClass}`\n          : `form-field ${cssClass}`\n      }\n      style={{ display: hideField ? 'none' : undefined }}\n    >\n      <Label htmlFor={`input_${formId}_${id}`} className={`gf-label ${labelPlacement}`}>\n        {label}\n        {isRequired ? <abbr>*</abbr> : null}\n      </Label>\n      <div className={type}>\n        {descriptionPlacement === 'above' && description ? (\n          description && <div className=\"description\">{description}</div>\n        ) : (\n          <React.Fragment>\n            {dateType && dateType === 'datepicker' ? (\n              <React.Fragment>\n                <SdatePicker className=\"ginput_container ginput_container_date\">\n                  <DatePicker\n                    name={`input_${id}`}\n                    id={`input_${formId}_25_${id}`}\n                    type=\"text\"\n                    className=\"datepicker hasDatepicker\"\n                    selected={startDate}\n                    onChange={(date) => {\n                      setDate(date);\n                      updateForm(\n                        {\n                          target: {\n                            value: date,\n                          },\n                        },\n                        field\n                      );\n                      setTouched(id);\n                      unsetError(id);\n                      setFocusClass(date);\n                    }}\n                    onBlur={(e) => {\n                      updateForm(\n                        {\n                          target: {\n                            value: startDate,\n                          },\n                        },\n                        field\n                      );\n                      setTouched(id);\n                      unsetError(id);\n                      setFocusClass(startDate);\n                    }}\n                    dateFormat={format || undefined}\n                    onFocus={() => setFocusClass(true)}\n                    required={isRequired}\n                    placeholderText={placeholder}\n                    {...dateOptions}\n                  />\n                </SdatePicker>\n                {((validationMessage && touched) || error) && (\n                  <span className=\"error-message\" id={`error_${formId}_${id}`}>\n                    {validationMessage || error}\n                  </span>\n                )}\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                {formatedInputs &&\n                  formatedInputs.map((item, index) => (\n                    <div className={type} key={item.id}>\n                      <Input\n                        id={`input_${formId}_${id}_${index}`}\n                        type=\"number\"\n                        name={customName || `input_${id}[]`}\n                        placeholder={item.placeholder}\n                        step=\"1\"\n                        min=\"1\"\n                        max={\n                          item.label === 'MM'\n                            ? 12\n                            : item.label === 'DD'\n                            ? 31\n                            : new Date().getFullYear() + 1\n                        }\n                        maxLength={item.label === 'YYYY' ? 4 : 2}\n                        value={item.value}\n                        onBlur={(event) => {\n                          field.subId = index;\n                          field.dateLabel = item.label;\n                          updateForm(event, field);\n                          setTouched(id);\n                          unsetError(id);\n                          setFocusClass(item.value !== '');\n                        }}\n                        onFocus={() => setFocusClass(true)}\n                      />\n                      <label htmlFor={`input_${formId}_${id}_${index}`} className=\"hide-label\">\n                        {item.label}\n                      </label>\n                      {validationMessage &&\n                        touched &&\n                        validationMessage[index] &&\n                        index === validationMessage[index].index &&\n                        validationMessage[index].message && (\n                          <span className=\"error-message\" id={`error_${formId}_${item.id}`}>\n                            {validationMessage[index].message}\n                          </span>\n                        )}\n                      {error && <span className=\"error-message\">{error}</span>}\n                    </div>\n                  ))}\n\n                {description && <div className=\"description\">{description}</div>}\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        )}\n      </div>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}