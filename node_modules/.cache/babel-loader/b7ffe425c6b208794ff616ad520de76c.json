{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\Fields\\\\Fileupload\\\\Fileupload.jsx\";\nimport React, { Component } from 'react';\nimport GFDropzone from './GFDropzone';\n\nclass Fileupload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imagePreviewUrl: this.props.field.preview || null,\n      selectedFile: this.props.field.preview ? true : null,\n      uploadFileText: 'No file chosen',\n      previewID: this.props.value || null,\n      errorText: this.props.error || false\n    };\n    this.inputFile = React.createRef();\n\n    this.onChangeHandler = event => {\n      const {\n        hasPreview,\n        allowedExtensions\n      } = this.props.field;\n      this.setState({\n        imagePreviewUrl: null,\n        selectedFile: event.target.files[0],\n        uploadFileText: event.target.files[0] ? event.target.files[0].name : 'No file chosen'\n      });\n\n      if (hasPreview && event.target && event.target.files[0]) {\n        // check file type\n        const extension = event.target.files[0].name.split('.').pop().toLowerCase(); // file extension from input file\n\n        const isSuccess = allowedExtensions.indexOf(extension) > -1; // is extension in acceptable types\n\n        if (isSuccess) {\n          const reader = new FileReader();\n\n          reader.onloadend = () => {\n            this.setState({\n              imagePreviewUrl: reader.result,\n              previewID: false\n            });\n          };\n\n          reader.readAsDataURL(event.target.files[0]);\n        }\n      }\n    };\n\n    this.removeFilePreview = () => {\n      const {\n        field,\n        unsetError\n      } = this.props;\n      this.inputFile.current.value = '';\n      this.setState({\n        imagePreviewUrl: null,\n        selectedFile: null,\n        previewID: false\n      });\n      unsetError(field.id);\n    };\n\n    this.prepareAllowedTypes = types => {\n      let accept = types.split(',');\n      accept = accept.map(str => `.${str.replace(/\\s/g, '')}`).join(', ');\n      return accept;\n    };\n\n    this.onButtonClickHandler = () => {\n      this.inputFile.current.click();\n    };\n  }\n\n  render() {\n    const {\n      selectedFile,\n      uploadFileText,\n      imagePreviewUrl,\n      previewID\n    } = this.state;\n    const {\n      field,\n      validationMessage,\n      touched,\n      setTouched,\n      hideField,\n      updateForm,\n      formID,\n      fieldError,\n      styledComponents,\n      error,\n      unsetError,\n      dropzoneText\n    } = this.props;\n    const {\n      id,\n      type,\n      label,\n      cssClass,\n      isRequired,\n      description,\n      descriptionPlacement,\n      labelPlacement,\n      width,\n      allowedExtensions,\n      buttonText,\n      hasPreview,\n      maxFileSize\n    } = field;\n    const {\n      Button = 'button',\n      Label = 'label',\n      FileWrapper = 'div',\n      Box = 'div'\n    } = styledComponents || false;\n    const hasDropzone = cssClass.indexOf('dropzone') > -1;\n    return /*#__PURE__*/React.createElement(Box, {\n      width: width,\n      className: validationMessage && touched || error ? `form-field error ${cssClass}` : `form-field ${cssClass}`,\n      style: {\n        display: hideField ? 'none' : undefined\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FileWrapper, {\n      className: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: `input_${formID}_${id}`,\n      className: `gf-label ${labelPlacement}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, label, isRequired ? /*#__PURE__*/React.createElement(\"abbr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 27\n      }\n    }, \"*\") : null), descriptionPlacement === 'above' && description ? description && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 28\n      }\n    }, description) : hasDropzone ? /*#__PURE__*/React.createElement(GFDropzone, {\n      dropzoneText: dropzoneText,\n      field: field,\n      id: id,\n      formID: formID,\n      isRequired: isRequired,\n      updateForm: updateForm,\n      setTouched: setTouched,\n      unsetError: unsetError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, maxFileSize && /*#__PURE__*/React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"MAX_FILE_SIZE\",\n      value: maxFileSize * 1048576,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: `input_${formID}_${id}`,\n      name: `input_${id}`,\n      type: \"file\",\n      required: isRequired,\n      ref: this.inputFile,\n      onChange: event => {\n        this.onChangeHandler(event);\n        updateForm(event, field);\n        setTouched(id);\n        unsetError(id);\n      },\n      onBlur: event => {\n        updateForm(event, field);\n        setTouched(id);\n      },\n      accept: this.prepareAllowedTypes(allowedExtensions) || undefined,\n      \"aria-label\": label,\n      \"aria-describedby\": `error_${formID}_${id}`,\n      \"aria-invalid\": !!validationMessage || !!error,\n      hidden: \"hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }), previewID && field.preview && /*#__PURE__*/React.createElement(\"input\", {\n      type: \"hidden\",\n      name: \"file-upload-preview\",\n      value: previewID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }), hasPreview && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"file-preview\",\n      style: selectedFile && imagePreviewUrl ? {\n        backgroundImage: `url(${imagePreviewUrl})`\n      } : undefined,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, selectedFile && imagePreviewUrl && /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"remove-file\",\n      onClick: () => this.removeFilePreview(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      \"aria-pressed\": \"false\",\n      tabIndex: \"0\",\n      role: \"button\",\n      className: \"fileUpload\",\n      onClick: this.onButtonClickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"yellow\",\n      tabIndex: \"-1\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, buttonText || 'Choose a file'), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, uploadFileText)), description && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 31\n      }\n    }, description)), (validationMessage && touched || error) && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error-message\",\n      id: `error_${id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, validationMessage || error), fieldError && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error-message\",\n      id: `error_${formID}_${id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, fieldError)));\n  }\n\n}\n\nexport default Fileupload;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/Fields/Fileupload/Fileupload.jsx"],"names":["React","Component","GFDropzone","Fileupload","state","imagePreviewUrl","props","field","preview","selectedFile","uploadFileText","previewID","value","errorText","error","inputFile","createRef","onChangeHandler","event","hasPreview","allowedExtensions","setState","target","files","name","extension","split","pop","toLowerCase","isSuccess","indexOf","reader","FileReader","onloadend","result","readAsDataURL","removeFilePreview","unsetError","current","id","prepareAllowedTypes","types","accept","map","str","replace","join","onButtonClickHandler","click","render","validationMessage","touched","setTouched","hideField","updateForm","formID","fieldError","styledComponents","dropzoneText","type","label","cssClass","isRequired","description","descriptionPlacement","labelPlacement","width","buttonText","maxFileSize","Button","Label","FileWrapper","Box","hasDropzone","display","undefined","backgroundImage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCG,KADiC,GACzB;AACNC,MAAAA,eAAe,EAAE,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,IAA4B,IADvC;AAENC,MAAAA,YAAY,EAAE,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,GAA2B,IAA3B,GAAkC,IAF1C;AAGNE,MAAAA,cAAc,EAAE,gBAHV;AAINC,MAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWM,KAAX,IAAoB,IAJzB;AAKNC,MAAAA,SAAS,EAAE,KAAKP,KAAL,CAAWQ,KAAX,IAAoB;AALzB,KADyB;AAAA,SASjCC,SATiC,GASrBf,KAAK,CAACgB,SAAN,EATqB;;AAAA,SAWjCC,eAXiC,GAWdC,KAAD,IAAW;AAC3B,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAAoC,KAAKd,KAAL,CAAWC,KAArD;AACA,WAAKc,QAAL,CAAc;AACZhB,QAAAA,eAAe,EAAE,IADL;AAEZI,QAAAA,YAAY,EAAES,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAFF;AAGZb,QAAAA,cAAc,EAAEQ,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,IAAwBL,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,IAA9C,GAAqD;AAHzD,OAAd;;AAMA,UAAIL,UAAU,IAAID,KAAK,CAACI,MAApB,IAA8BJ,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAlC,EAAyD;AACvD;AACA,cAAME,SAAS,GAAGP,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,EAAsBC,IAAtB,CACfE,KADe,CACT,GADS,EAEfC,GAFe,GAGfC,WAHe,EAAlB,CAFuD,CAKrC;;AAClB,cAAMC,SAAS,GAAGT,iBAAiB,CAACU,OAAlB,CAA0BL,SAA1B,IAAuC,CAAC,CAA1D,CANuD,CAMM;;AAC7D,YAAII,SAAJ,EAAe;AACb,gBAAME,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,UAAAA,MAAM,CAACE,SAAP,GAAmB,MAAM;AACvB,iBAAKZ,QAAL,CAAc;AACZhB,cAAAA,eAAe,EAAE0B,MAAM,CAACG,MADZ;AAEZvB,cAAAA,SAAS,EAAE;AAFC,aAAd;AAID,WALD;;AAOAoB,UAAAA,MAAM,CAACI,aAAP,CAAqBjB,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAArB;AACD;AACF;AACF,KAvCgC;;AAAA,SAyCjCa,iBAzCiC,GAyCb,MAAM;AACxB,YAAM;AAAE7B,QAAAA,KAAF;AAAS8B,QAAAA;AAAT,UAAwB,KAAK/B,KAAnC;AACA,WAAKS,SAAL,CAAeuB,OAAf,CAAuB1B,KAAvB,GAA+B,EAA/B;AACA,WAAKS,QAAL,CAAc;AAAEhB,QAAAA,eAAe,EAAE,IAAnB;AAAyBI,QAAAA,YAAY,EAAE,IAAvC;AAA6CE,QAAAA,SAAS,EAAE;AAAxD,OAAd;AACA0B,MAAAA,UAAU,CAAC9B,KAAK,CAACgC,EAAP,CAAV;AACD,KA9CgC;;AAAA,SAgDjCC,mBAhDiC,GAgDVC,KAAD,IAAW;AAC/B,UAAIC,MAAM,GAAGD,KAAK,CAACf,KAAN,CAAY,GAAZ,CAAb;AACAgB,MAAAA,MAAM,GAAGA,MAAM,CAACC,GAAP,CAAYC,GAAD,IAAU,IAAGA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAuB,EAA/C,EAAkDC,IAAlD,CAAuD,IAAvD,CAAT;AACA,aAAOJ,MAAP;AACD,KApDgC;;AAAA,SAsDjCK,oBAtDiC,GAsDV,MAAM;AAC3B,WAAKhC,SAAL,CAAeuB,OAAf,CAAuBU,KAAvB;AACD,KAxDgC;AAAA;;AA0DjCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExC,MAAAA,YAAF;AAAgBC,MAAAA,cAAhB;AAAgCL,MAAAA,eAAhC;AAAiDM,MAAAA;AAAjD,QAA+D,KAAKP,KAA1E;AAEA,UAAM;AACJG,MAAAA,KADI;AAEJ2C,MAAAA,iBAFI;AAGJC,MAAAA,OAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,SALI;AAMJC,MAAAA,UANI;AAOJC,MAAAA,MAPI;AAQJC,MAAAA,UARI;AASJC,MAAAA,gBATI;AAUJ3C,MAAAA,KAVI;AAWJuB,MAAAA,UAXI;AAYJqB,MAAAA;AAZI,QAaF,KAAKpD,KAbT;AAcA,UAAM;AACJiC,MAAAA,EADI;AAEJoB,MAAAA,IAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA,oBAPI;AAQJC,MAAAA,cARI;AASJC,MAAAA,KATI;AAUJ9C,MAAAA,iBAVI;AAWJ+C,MAAAA,UAXI;AAYJhD,MAAAA,UAZI;AAaJiD,MAAAA;AAbI,QAcF7D,KAdJ;AAeA,UAAM;AAAE8D,MAAAA,MAAM,GAAG,QAAX;AAAqBC,MAAAA,KAAK,GAAG,OAA7B;AAAsCC,MAAAA,WAAW,GAAG,KAApD;AAA2DC,MAAAA,GAAG,GAAG;AAAjE,QACJf,gBAAgB,IAAI,KADtB;AAGA,UAAMgB,WAAW,GAAGZ,QAAQ,CAAC/B,OAAT,CAAiB,UAAjB,IAA+B,CAAC,CAApD;AAEA,wBACE,oBAAC,GAAD;AACE,MAAA,KAAK,EAAEoC,KADT;AAEE,MAAA,SAAS,EACNhB,iBAAiB,IAAIC,OAAtB,IAAkCrC,KAAlC,GACK,oBAAmB+C,QAAS,EADjC,GAEK,cAAaA,QAAS,EAL/B;AAOE,MAAA,KAAK,EAAE;AAAEa,QAAAA,OAAO,EAAErB,SAAS,GAAG,MAAH,GAAYsB;AAAhC,OAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBASE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAEhB,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAG,SAAQJ,MAAO,IAAGhB,EAAG,EAAtC;AAAyC,MAAA,SAAS,EAAG,YAAW0B,cAAe,EAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,KADH,EAEGE,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAH,GAAoB,IAFjC,CADF,EAKGE,oBAAoB,KAAK,OAAzB,IAAoCD,WAApC,GACCA,WAAW,iBAAI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BA,WAA9B,CADhB,GAEGU,WAAW,gBACb,oBAAC,UAAD;AACE,MAAA,YAAY,EAAEf,YADhB;AAEE,MAAA,KAAK,EAAEnD,KAFT;AAGE,MAAA,EAAE,EAAEgC,EAHN;AAIE,MAAA,MAAM,EAAEgB,MAJV;AAKE,MAAA,UAAU,EAAEO,UALd;AAME,MAAA,UAAU,EAAER,UANd;AAOE,MAAA,UAAU,EAAEF,UAPd;AAQE,MAAA,UAAU,EAAEf,UARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa,gBAYb,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG+B,WAAW,iBACV;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,eAA1B;AAA0C,MAAA,KAAK,EAAEA,WAAW,GAAG,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAIE;AACE,MAAA,EAAE,EAAG,SAAQb,MAAO,IAAGhB,EAAG,EAD5B;AAEE,MAAA,IAAI,EAAG,SAAQA,EAAG,EAFpB;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,QAAQ,EAAEuB,UAJZ;AAKE,MAAA,GAAG,EAAE,KAAK/C,SALZ;AAME,MAAA,QAAQ,EAAGG,KAAD,IAAW;AACnB,aAAKD,eAAL,CAAqBC,KAArB;AACAoC,QAAAA,UAAU,CAACpC,KAAD,EAAQX,KAAR,CAAV;AACA6C,QAAAA,UAAU,CAACb,EAAD,CAAV;AACAF,QAAAA,UAAU,CAACE,EAAD,CAAV;AACD,OAXH;AAYE,MAAA,MAAM,EAAGrB,KAAD,IAAW;AACjBoC,QAAAA,UAAU,CAACpC,KAAD,EAAQX,KAAR,CAAV;AACA6C,QAAAA,UAAU,CAACb,EAAD,CAAV;AACD,OAfH;AAgBE,MAAA,MAAM,EAAE,KAAKC,mBAAL,CAAyBpB,iBAAzB,KAA+CuD,SAhBzD;AAiBE,oBAAYf,KAjBd;AAkBE,0BAAmB,SAAQL,MAAO,IAAGhB,EAAG,EAlB1C;AAmBE,sBAAc,CAAC,CAACW,iBAAF,IAAuB,CAAC,CAACpC,KAnBzC;AAoBE,MAAA,MAAM,EAAC,QApBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EA0BGH,SAAS,IAAIJ,KAAK,CAACC,OAAnB,iBACC;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,qBAA1B;AAAgD,MAAA,KAAK,EAAEG,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BJ,EA6BGQ,UAAU,iBACT;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,KAAK,EACHV,YAAY,IAAIJ,eAAhB,GACI;AAAEuE,QAAAA,eAAe,EAAG,OAAMvE,eAAgB;AAA1C,OADJ,GAEIsE,SALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQGlE,YAAY,IAAIJ,eAAhB,iBACC;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,aAFZ;AAGE,MAAA,OAAO,EAAE,MAAM,KAAK+B,iBAAL,EAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CA9BJ,eA+CE;AACE,sBAAa,OADf;AAEE,MAAA,QAAQ,EAAC,GAFX;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,SAAS,EAAC,YAJZ;AAKE,MAAA,OAAO,EAAE,KAAKW,oBALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAuB,MAAA,QAAQ,EAAC,IAAhC;AAAqC,MAAA,IAAI,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGoB,UAAU,IAAI,eADjB,CAPF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOzD,cAAP,CAVF,CA/CF,EA4DGqD,WAAW,iBAAI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BA,WAA9B,CA5DlB,CAnBJ,EAkFG,CAAEb,iBAAiB,IAAIC,OAAtB,IAAkCrC,KAAnC,kBACC;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,EAAE,EAAG,SAAQyB,EAAG,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGW,iBAAiB,IAAIpC,KADxB,CAnFJ,EAuFG0C,UAAU,iBACT;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,EAAE,EAAG,SAAQD,MAAO,IAAGhB,EAAG,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGiB,UADH,CAxFJ,CATF,CADF;AAyGD;;AAxMgC;;AA2MnC,eAAerD,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport GFDropzone from './GFDropzone';\n\nclass Fileupload extends Component {\n  state = {\n    imagePreviewUrl: this.props.field.preview || null,\n    selectedFile: this.props.field.preview ? true : null,\n    uploadFileText: 'No file chosen',\n    previewID: this.props.value || null,\n    errorText: this.props.error || false,\n  };\n\n  inputFile = React.createRef();\n\n  onChangeHandler = (event) => {\n    const { hasPreview, allowedExtensions } = this.props.field;\n    this.setState({\n      imagePreviewUrl: null,\n      selectedFile: event.target.files[0],\n      uploadFileText: event.target.files[0] ? event.target.files[0].name : 'No file chosen',\n    });\n\n    if (hasPreview && event.target && event.target.files[0]) {\n      // check file type\n      const extension = event.target.files[0].name\n        .split('.')\n        .pop()\n        .toLowerCase(); // file extension from input file\n      const isSuccess = allowedExtensions.indexOf(extension) > -1; // is extension in acceptable types\n      if (isSuccess) {\n        const reader = new FileReader();\n\n        reader.onloadend = () => {\n          this.setState({\n            imagePreviewUrl: reader.result,\n            previewID: false,\n          });\n        };\n\n        reader.readAsDataURL(event.target.files[0]);\n      }\n    }\n  };\n\n  removeFilePreview = () => {\n    const { field, unsetError } = this.props;\n    this.inputFile.current.value = '';\n    this.setState({ imagePreviewUrl: null, selectedFile: null, previewID: false });\n    unsetError(field.id);\n  };\n\n  prepareAllowedTypes = (types) => {\n    let accept = types.split(',');\n    accept = accept.map((str) => `.${str.replace(/\\s/g, '')}`).join(', ');\n    return accept;\n  };\n\n  onButtonClickHandler = () => {\n    this.inputFile.current.click();\n  };\n\n  render() {\n    const { selectedFile, uploadFileText, imagePreviewUrl, previewID } = this.state;\n\n    const {\n      field,\n      validationMessage,\n      touched,\n      setTouched,\n      hideField,\n      updateForm,\n      formID,\n      fieldError,\n      styledComponents,\n      error,\n      unsetError,\n      dropzoneText,\n    } = this.props;\n    const {\n      id,\n      type,\n      label,\n      cssClass,\n      isRequired,\n      description,\n      descriptionPlacement,\n      labelPlacement,\n      width,\n      allowedExtensions,\n      buttonText,\n      hasPreview,\n      maxFileSize,\n    } = field;\n    const { Button = 'button', Label = 'label', FileWrapper = 'div', Box = 'div' } =\n      styledComponents || false;\n\n    const hasDropzone = cssClass.indexOf('dropzone') > -1;\n\n    return (\n      <Box\n        width={width}\n        className={\n          (validationMessage && touched) || error\n            ? `form-field error ${cssClass}`\n            : `form-field ${cssClass}`\n        }\n        style={{ display: hideField ? 'none' : undefined }}\n      >\n        <FileWrapper className={type}>\n          <Label htmlFor={`input_${formID}_${id}`} className={`gf-label ${labelPlacement}`}>\n            {label}\n            {isRequired ? <abbr>*</abbr> : null}\n          </Label>\n          {descriptionPlacement === 'above' && description ? (\n            description && <div className=\"description\">{description}</div>\n          ) : hasDropzone ? (\n            <GFDropzone\n              dropzoneText={dropzoneText}\n              field={field}\n              id={id}\n              formID={formID}\n              isRequired={isRequired}\n              updateForm={updateForm}\n              setTouched={setTouched}\n              unsetError={unsetError}\n            />\n          ) : (\n            <React.Fragment>\n              {maxFileSize && (\n                <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value={maxFileSize * 1048576} />\n              )}\n              <input\n                id={`input_${formID}_${id}`}\n                name={`input_${id}`}\n                type=\"file\"\n                required={isRequired}\n                ref={this.inputFile}\n                onChange={(event) => {\n                  this.onChangeHandler(event);\n                  updateForm(event, field);\n                  setTouched(id);\n                  unsetError(id);\n                }}\n                onBlur={(event) => {\n                  updateForm(event, field);\n                  setTouched(id);\n                }}\n                accept={this.prepareAllowedTypes(allowedExtensions) || undefined}\n                aria-label={label}\n                aria-describedby={`error_${formID}_${id}`}\n                aria-invalid={!!validationMessage || !!error}\n                hidden=\"hidden\"\n              />\n              {previewID && field.preview && (\n                <input type=\"hidden\" name=\"file-upload-preview\" value={previewID} />\n              )}\n              {hasPreview && (\n                <div\n                  className=\"file-preview\"\n                  style={\n                    selectedFile && imagePreviewUrl\n                      ? { backgroundImage: `url(${imagePreviewUrl})` }\n                      : undefined\n                  }\n                >\n                  {selectedFile && imagePreviewUrl && (\n                    <button\n                      type=\"button\"\n                      className=\"remove-file\"\n                      onClick={() => this.removeFilePreview()}\n                    />\n                  )}\n                </div>\n              )}\n              <div\n                aria-pressed=\"false\"\n                tabIndex=\"0\"\n                role=\"button\"\n                className=\"fileUpload\"\n                onClick={this.onButtonClickHandler}\n              >\n                <Button color=\"yellow\" tabIndex=\"-1\" type=\"button\">\n                  {buttonText || 'Choose a file'}\n                </Button>\n                <span>{uploadFileText}</span>\n              </div>\n\n              {description && <div className=\"description\">{description}</div>}\n            </React.Fragment>\n          )}\n          {((validationMessage && touched) || error) && (\n            <span className=\"error-message\" id={`error_${id}`}>\n              {validationMessage || error}\n            </span>\n          )}\n          {fieldError && (\n            <span className=\"error-message\" id={`error_${formID}_${id}`}>\n              {fieldError}\n            </span>\n          )}\n        </FileWrapper>\n      </Box>\n    );\n  }\n}\n\nexport default Fileupload;\n\n"]},"metadata":{},"sourceType":"module"}