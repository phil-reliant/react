{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\Fields\\\\Hidden.jsx\";\nimport React from 'react';\nimport queryString from 'query-string';\nexport default (({\n  field,\n  value,\n  validationMessage,\n  touched,\n  setTouched,\n  updateForm,\n  ...props\n}) => {\n  const {\n    id,\n    type,\n    isRequired,\n    customName,\n    formId\n  } = field;\n  let prePopulated = false;\n\n  if (field.allowsPrepopulate) {\n    const queries = queryString.parse(window.location.search); // EXT:: added 'window.' to fix error about using 'location'\n\n    prePopulated = queries[field.inputName];\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: customName || `input_${id}`,\n    type: type,\n    value: !prePopulated ? value : prePopulated,\n    required: isRequired,\n    onChange: event => updateForm(event, field),\n    onBlur: event => {\n      updateForm(event, field);\n      setTouched(id);\n    },\n    \"aria-describedby\": `error_${formId}_${id}`,\n    \"aria-invalid\": !!validationMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), validationMessage && touched && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error-message\",\n    id: `error_${formId}_${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, validationMessage));\n});","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/Fields/Hidden.jsx"],"names":["React","queryString","field","value","validationMessage","touched","setTouched","updateForm","props","id","type","isRequired","customName","formId","prePopulated","allowsPrepopulate","queries","parse","window","location","search","inputName","event"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,gBAAe,CAAC;AACdC,EAAAA,KADc;AACPC,EAAAA,KADO;AACAC,EAAAA,iBADA;AACmBC,EAAAA,OADnB;AAC4BC,EAAAA,UAD5B;AACwCC,EAAAA,UADxC;AACoD,KAAGC;AADvD,CAAD,KAET;AACJ,QAAM;AACJC,IAAAA,EADI;AACAC,IAAAA,IADA;AACMC,IAAAA,UADN;AACkBC,IAAAA,UADlB;AAC8BC,IAAAA;AAD9B,MAEFX,KAFJ;AAGA,MAAIY,YAAY,GAAG,KAAnB;;AACA,MAAIZ,KAAK,CAACa,iBAAV,EAA6B;AAC3B,UAAMC,OAAO,GAAGf,WAAW,CAACgB,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAlC,CAAhB,CAD2B,CACgC;;AAC3DN,IAAAA,YAAY,GAAGE,OAAO,CAACd,KAAK,CAACmB,SAAP,CAAtB;AACD;;AACD,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAET,UAAU,IAAK,SAAQH,EAAG,EADlC;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,KAAK,EAAE,CAACI,YAAD,GAAgBX,KAAhB,GAAwBW,YAHjC;AAIE,IAAA,QAAQ,EAAEH,UAJZ;AAKE,IAAA,QAAQ,EAAEW,KAAK,IAAIf,UAAU,CAACe,KAAD,EAAQpB,KAAR,CAL/B;AAME,IAAA,MAAM,EAAGoB,KAAD,IAAW;AACjBf,MAAAA,UAAU,CAACe,KAAD,EAAQpB,KAAR,CAAV;AACAI,MAAAA,UAAU,CAACG,EAAD,CAAV;AACD,KATH;AAUE,wBAAmB,SAAQI,MAAO,IAAGJ,EAAG,EAV1C;AAWE,oBAAc,CAAC,CAACL,iBAXlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAcGA,iBAAiB,IAAIC,OAArB,iBACC;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAgC,IAAA,EAAE,EAAG,SAAQQ,MAAO,IAAGJ,EAAG,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,iBADH,CAfJ,CADF;AAsBD,CAjCD","sourcesContent":["import React from 'react';\nimport queryString from 'query-string';\n\nexport default ({\n  field, value, validationMessage, touched, setTouched, updateForm, ...props\n}) => {\n  const {\n    id, type, isRequired, customName, formId,\n  } = field;\n  let prePopulated = false;\n  if (field.allowsPrepopulate) {\n    const queries = queryString.parse(window.location.search); // EXT:: added 'window.' to fix error about using 'location'\n    prePopulated = queries[field.inputName];\n  }\n  return (\n    <div>\n      <input\n        name={customName || `input_${id}`}\n        type={type}\n        value={!prePopulated ? value : prePopulated}\n        required={isRequired}\n        onChange={event => updateForm(event, field)}\n        onBlur={(event) => {\n          updateForm(event, field);\n          setTouched(id);\n        }}\n        aria-describedby={`error_${formId}_${id}`}\n        aria-invalid={!!validationMessage}\n      />\n      {validationMessage && touched && (\n        <span className=\"error-message\" id={`error_${formId}_${id}`}>\n          {validationMessage}\n        </span>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}