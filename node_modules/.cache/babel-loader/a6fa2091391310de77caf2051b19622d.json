{"ast":null,"code":"const getMessage = (message, type) => {\n  if (!type) return false;\n\n  if (message && typeof message === \"object\" && message[type]) {\n    return message[type];\n  }\n\n  return message;\n};\n\nconst isEmail = (email, message) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if (!re.test(email)) {\n    const customMessage = getMessage(message, \"email\");\n    return customMessage || \"Enter a valid email\";\n  }\n\n  return false;\n};\n\nconst isUrl = (str, message) => {\n  const pattern = new RegExp(\"^(https?:\\\\/\\\\/)?\" + // protocol\n  \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n  \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n  \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n  \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n  \"(\\\\#[-a-z\\\\d_]*)?$\", \"i\"); // fragment locator\n\n  if (!pattern.test(str)) {\n    const customMessage = getMessage(message, \"url\");\n    return customMessage || \"Enter a valid url\";\n  }\n\n  return false;\n};\n\nconst isEmpty = value => {\n  if (!value) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isRequired = (required, empty, message) => {\n  if (required && empty) {\n    const customMessage = getMessage(message, \"required\");\n    return customMessage || \"This field is required\";\n  }\n\n  return false;\n};\n\nconst selectValidation = (required, value, placeholder) => !(value === placeholder && required);\n\nconst checkboxValidation = (values, message) => {\n  if (values.length < 1) {\n    return message || \"This field is required\";\n  }\n\n  return false;\n};\n\nconst passwordValidation = (values, field) => {\n  const {\n    inputs,\n    isRequired: required,\n    errorMessage\n  } = field || false;\n  const {\n    required: requiredMsg,\n    mismatch\n  } = errorMessage || false; // check if fields is required and isn't empty\n\n  const isInputsEmpty = values && values.filter(item => item && item.val === \"\").length;\n\n  if ((values && values.length === 0 || isInputsEmpty === inputs.length) && required) {\n    return requiredMsg || \"This field is required\";\n  } // if there is repeat password field => check if match\n\n\n  if (values && values.length === 2 && inputs && inputs.length === 2) {\n    if (values[1] && values[0] && values[1].val !== \"\" && values[1].val !== values[0].val) {\n      return mismatch || \"Mismatch\";\n    }\n  }\n\n  return false;\n};\n\nconst isDate = (values, field) => {\n  const validation = [];\n\n  for (let i = 0; i < values.length; i++) {\n    if (values[i]) {\n      const {\n        val,\n        label\n      } = values[i];\n\n      if (val) {\n        if (label === \"MM\") {\n          const max = 12;\n          const min = 1;\n          const maxLength = 2;\n\n          if (val.length > maxLength || val < min || val > max) {\n            validation[i] = {\n              index: i,\n              message: \"Enter a valid month\"\n            };\n          }\n        } else if (label === \"DD\") {\n          const max = 31;\n          const min = 1;\n          const maxLength = 2;\n\n          if (val.length > maxLength || val < min || val > max) {\n            validation[i] = {\n              index: i,\n              message: \"Enter a valid date\"\n            };\n          }\n        } else if (label === \"YYYY\") {\n          const max = new Date().getFullYear() + 1;\n          const min = 1920;\n          const maxLength = 4;\n\n          if (val.length > maxLength || val < min || val > max) {\n            validation[i] = {\n              index: i,\n              message: \"Enter a valid year\"\n            };\n          }\n        }\n      }\n    }\n  }\n\n  return validation;\n};\n\nconst validateField = (value, field) => {\n  const {\n    type,\n    isRequired: required\n  } = field; // Check first if requried checkbox or radio\n\n  if ((type === \"checkbox\" || type === \"radio\") && required) {\n    return checkboxValidation(value, field.errorMessage);\n  }\n\n  if (type === \"password\") {\n    return passwordValidation(value, field);\n  } // Check if empty\n\n\n  const empty = isEmpty(value);\n  let validationMessage = \"\";\n  const message = field && field.errorMessage ? field.errorMessage : false; // Set validation message if required\n\n  validationMessage = required ? isRequired(required, empty, message) : false; // Set other validation messages\n\n  if (!validationMessage && !empty) {\n    if (type === \"email\") {\n      validationMessage = isEmail(value, message);\n    } else if (type === \"website\") {\n      validationMessage = isUrl(value, message);\n    } else if (type === \"date\") {\n      let isValid = true;\n\n      if (field.dateType && field.dateType === \"datepicker\") {\n        isValid = required ? isRequired(required, empty, message) : false;\n      } else {\n        isValid = isDate(value, field);\n      }\n\n      validationMessage = isValid.length > 0 ? isValid : false;\n    }\n  }\n\n  return validationMessage;\n};\n\nexport { isEmpty, selectValidation, checkboxValidation, isUrl, isEmail, isRequired, validateField };","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/Helpers/validation.js"],"names":["getMessage","message","type","isEmail","email","re","test","customMessage","isUrl","str","pattern","RegExp","isEmpty","value","isRequired","required","empty","selectValidation","placeholder","checkboxValidation","values","length","passwordValidation","field","inputs","errorMessage","requiredMsg","mismatch","isInputsEmpty","filter","item","val","isDate","validation","i","label","max","min","maxLength","index","Date","getFullYear","validateField","validationMessage","isValid","dateType"],"mappings":"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","sourcesContent":["const getMessage = (message, type) => {\n  if (!type) return false;\n  if (message && typeof message === \"object\" && message[type]) {\n    return message[type];\n  }\n  return message;\n};\n\nconst isEmail = (email, message) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  if (!re.test(email)) {\n    const customMessage = getMessage(message, \"email\");\n    return customMessage || \"Enter a valid email\";\n  }\n  return false;\n};\n\nconst isUrl = (str, message) => {\n  const pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n    \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n    \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n    \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n    \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  if (!pattern.test(str)) {\n    const customMessage = getMessage(message, \"url\");\n    return customMessage || \"Enter a valid url\";\n  }\n  return false;\n};\n\nconst isEmpty = value => {\n  if (!value) {\n    return true;\n  }\n  return false;\n};\n\nconst isRequired = (required, empty, message) => {\n  if (required && empty) {\n    const customMessage = getMessage(message, \"required\");\n    return customMessage || \"This field is required\";\n  }\n  return false;\n};\n\nconst selectValidation = (required, value, placeholder) =>\n  !(value === placeholder && required);\n\nconst checkboxValidation = (values, message) => {\n  if (values.length < 1) {\n    return message || \"This field is required\";\n  }\n  return false;\n};\n\nconst passwordValidation = (values, field) => {\n  const { inputs, isRequired: required, errorMessage } = field || false;\n  const { required: requiredMsg, mismatch } = errorMessage || false;\n\n  // check if fields is required and isn't empty\n  const isInputsEmpty =\n    values && values.filter(item => item && item.val === \"\").length;\n\n  if (\n    ((values && values.length === 0) || isInputsEmpty === inputs.length) &&\n    required\n  ) {\n    return requiredMsg || \"This field is required\";\n  }\n\n  // if there is repeat password field => check if match\n  if (values && values.length === 2 && inputs && inputs.length === 2) {\n    if (\n      values[1] &&\n      values[0] &&\n      values[1].val !== \"\" &&\n      values[1].val !== values[0].val\n    ) {\n      return mismatch || \"Mismatch\";\n    }\n  }\n\n  return false;\n};\n\nconst isDate = (values, field) => {\n  const validation = [];\n  for (let i = 0; i < values.length; i++) {\n    if (values[i]) {\n      const { val, label } = values[i];\n      if (val) {\n        if (label === \"MM\") {\n          const max = 12;\n          const min = 1;\n          const maxLength = 2;\n          if (val.length > maxLength || val < min || val > max) {\n            validation[i] = {\n              index: i,\n              message: \"Enter a valid month\"\n            };\n          }\n        } else if (label === \"DD\") {\n          const max = 31;\n          const min = 1;\n          const maxLength = 2;\n          if (val.length > maxLength || val < min || val > max) {\n            validation[i] = {\n              index: i,\n              message: \"Enter a valid date\"\n            };\n          }\n        } else if (label === \"YYYY\") {\n          const max = new Date().getFullYear() + 1;\n          const min = 1920;\n          const maxLength = 4;\n          if (val.length > maxLength || val < min || val > max) {\n            validation[i] = {\n              index: i,\n              message: \"Enter a valid year\"\n            };\n          }\n        }\n      }\n    }\n  }\n  return validation;\n};\n\nconst validateField = (value, field) => {\n  const { type, isRequired: required } = field;\n  // Check first if requried checkbox or radio\n  if ((type === \"checkbox\" || type === \"radio\") && required) {\n    return checkboxValidation(value, field.errorMessage);\n  }\n\n  if (type === \"password\") {\n    return passwordValidation(value, field);\n  }\n\n  // Check if empty\n  const empty = isEmpty(value);\n  let validationMessage = \"\";\n  const message = field && field.errorMessage ? field.errorMessage : false;\n  // Set validation message if required\n  validationMessage = required ? isRequired(required, empty, message) : false;\n  // Set other validation messages\n  if (!validationMessage && !empty) {\n    if (type === \"email\") {\n      validationMessage = isEmail(value, message);\n    } else if (type === \"website\") {\n      validationMessage = isUrl(value, message);\n    } else if (type === \"date\") {\n      let isValid = true;\n      if (field.dateType && field.dateType === \"datepicker\") {\n        isValid = required ? isRequired(required, empty, message) : false;\n      } else {\n        isValid = isDate(value, field);\n      }\n      validationMessage = isValid.length > 0 ? isValid : false;\n    }\n  }\n  return validationMessage;\n};\n\nexport {\n  isEmpty,\n  selectValidation,\n  checkboxValidation,\n  isUrl,\n  isEmail,\n  isRequired,\n  validateField\n};\n"]},"metadata":{},"sourceType":"module"}