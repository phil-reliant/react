{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\templates\\\\ResourceArchive\\\\FilterResultsPage.js\";\nimport React from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from \"react-apollo\";\nimport LoadingSpinner from '../../components/LoadingSpinner';\nimport ResourceItem from './ResourceItem';\nimport * as ResourceConstants from './ResourceConstants';\nimport * as ResourceQueries from './ResourceQueries';\nimport { BuildGenericResourcesFromNodes } from './ResourceUtilities';\n\nconst FilterResultsPage = ({\n  selectedTopics,\n  selectedResourceTypes,\n  submittedSearchText\n}) => {\n  // console.log('FilterResultsPage.selectedTopic', selectedTopics);\n  // console.log('FilterResultsPage.selectedResourceType', selectedResourceTypes);\n  const buildDynamicQuery = () => {\n    // if they picked topic(s) then we need a where clause to use in our queries\n    // ex: (where: {search: \"\", categoryIn: [1632]}, first: 50)\n    let dynamicWhereClause = \"\";\n    let categoryIds = [];\n\n    if (selectedTopics && selectedTopics.length > 0) {\n      for (let t = 0; t < selectedTopics.length; t++) {\n        categoryIds.push(selectedTopics[t].value);\n      }\n    }\n\n    dynamicWhereClause = `(where: {${submittedSearchText !== \"\" ? `search: \"${submittedSearchText}\", ` : ``} ${categoryIds.length > 0 ? `categoryIn: [${categoryIds.join(',')}]` : ``}}, first: 50)`; // console.log('dynamicWhereClause', dynamicWhereClause);\n    // default to querying for all resource types\n\n    let dynamicQuery = gql`\n\t\t\tquery DYNAMIC_RESOURCE_QUERY {\n\t\t\t\tposts${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.ARTICLES_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tcaseStudies${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\twhitePapers${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tguides${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GUIDES_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tinfographics${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tpodcasts${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.PODCASTS_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tvideos${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.VIDEOS_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t}\n\t\t`; // \tconsole.log('dynamicQuery', `\n    // \tquery DYNAMIC_RESOURCE_QUERY {\n    // \t\tposts${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.ARTICLES_PARTIAL_QUERY}\n    // \t\t}\n    // \t\tcaseStudies${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n    // \t\t}\n    // \t\twhitePapers${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n    // \t\t}\n    // \t\tguides${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.GUIDES_PARTIAL_QUERY}\n    // \t\t}\n    // \t\tinfographics${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n    // \t\t}\n    // \t\tpodcasts${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.PODCASTS_PARTIAL_QUERY}\n    // \t\t}\n    // \t\tvideos${dynamicWhereClause} {\n    // \t\t\t${ResourceQueries.VIDEOS_PARTIAL_QUERY}\n    // \t\t}\n    // \t}\n    // `);\n    // if a specific resource type was selected, then instead use a post type specific query\n\n    if (selectedResourceTypes && selectedResourceTypes.length > 0) {\n      // console.log('using specific', selectedResourceTypes[0].value);\n      let dynamicQueryPortion = ``;\n\n      for (let i = 0; i < selectedResourceTypes.length; i++) {\n        let resType = selectedResourceTypes[i];\n\n        if (resType.value === ResourceConstants.Articles.PostType) {\n          dynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.ARTICLES_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n        } else if (resType.value === ResourceConstants.Podcasts.PostType) {\n          dynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.PODCASTS_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n        } else if (resType.value === ResourceConstants.Videos.PostType) {\n          dynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.VIDEOS_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n        } else if (resType.value === ResourceConstants.Guides.PostType) {\n          dynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.GUIDES_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n        } else {\n          dynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n        }\n      } // console.log('dynamicQueryPortion', dynamicQueryPortion);\n\n\n      dynamicQuery = gql`\n\t\t\t\tquery DYNAMIC_RESOURCE_QUERY {\n\t\t\t\t\t${dynamicQueryPortion}\n\t\t\t\t}`;\n    }\n\n    return dynamicQuery;\n  };\n\n  const dynamicQuery = buildDynamicQuery(); // console.log('selectedResourceType', selectedResourceTypes);\n  // RTR-132: if filtering by type then show the category, if filtering by topic then show the type, if filtering by both show the category\n  // NOTE:: said another way, always show the category unless filtering by topic - then show the resource type\n\n  let useResourceTypeAsTags = false;\n\n  if (selectedTopics && selectedTopics.length > 0 && (!selectedResourceTypes || selectedResourceTypes.length === 0)) {\n    useResourceTypeAsTags = true;\n  }\n\n  const baseClass = `filter-results-page`;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${baseClass} container`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `row`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `col-12`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: `${baseClass}__header`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 6\n    }\n  }, \"Results\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `row ${baseClass}__results-wrapper`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Query, {\n    query: dynamicQuery,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n        small: true,\n        paddingTopSmall: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 10\n        }\n      }));\n    }\n\n    if (error) {\n      console.error('FilterResultsPage unable to query resources!');\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }\n      }, \"Error\");\n    } // console.log('FilterResultsPage data', data);\n\n\n    let genericResources = [];\n\n    if (data.posts && data.posts.nodes) {\n      const articleResources = BuildGenericResourcesFromNodes(data.posts.nodes, ResourceConstants.Articles, useResourceTypeAsTags);\n      articleResources.forEach(res => {\n        genericResources.push(res);\n      });\n    }\n\n    if (data.caseStudies && data.caseStudies.nodes) {\n      const caseStudyResources = BuildGenericResourcesFromNodes(data.caseStudies.nodes, ResourceConstants.CaseStudy, useResourceTypeAsTags);\n      caseStudyResources.forEach(res => {\n        genericResources.push(res);\n      });\n    }\n\n    if (data.infographics && data.infographics.nodes) {\n      const infographicResources = BuildGenericResourcesFromNodes(data.infographics.nodes, ResourceConstants.Infographics, useResourceTypeAsTags);\n      infographicResources.forEach(res => {\n        genericResources.push(res);\n      });\n    }\n\n    if (data.podcasts && data.podcasts.nodes) {\n      const podcastResources = BuildGenericResourcesFromNodes(data.podcasts.nodes, ResourceConstants.Podcasts, useResourceTypeAsTags);\n      podcastResources.forEach(res => {\n        genericResources.push(res);\n      });\n    }\n\n    if (data.videos && data.videos.nodes) {\n      const videoResources = BuildGenericResourcesFromNodes(data.videos.nodes, ResourceConstants.Videos, useResourceTypeAsTags);\n      videoResources.forEach(res => {\n        genericResources.push(res);\n      });\n    }\n\n    if (data.whitePapers && data.whitePapers.nodes) {\n      const whitePaperResources = BuildGenericResourcesFromNodes(data.whitePapers.nodes, ResourceConstants.WhitePapers, useResourceTypeAsTags);\n      whitePaperResources.forEach(res => {\n        genericResources.push(res);\n      });\n    }\n\n    if (data.guides && data.guides.nodes) {\n      const guideResources = BuildGenericResourcesFromNodes(data.guides.nodes, ResourceConstants.Guides, useResourceTypeAsTags);\n      guideResources.forEach(res => {\n        genericResources.push(res);\n      });\n    } // sort with newest first (will intersperse results so they aren't grouped by type)\n\n\n    const sortedGenericResources = genericResources.slice().sort((a, b) => new Date(b.date) - new Date(a.date));\n    return sortedGenericResources.map((resourceEntry, index) => {\n      return /*#__PURE__*/React.createElement(ResourceItem, {\n        key: `ri-${index}`,\n        title: resourceEntry.title,\n        date: resourceEntry.date,\n        excerpt: resourceEntry.excerpt,\n        featuredImage: resourceEntry.featuredImage,\n        tagListing: resourceEntry.tagListing,\n        resourceDownloadUrl: resourceEntry.resourceDownloadUrl,\n        resourceType: resourceEntry.resourceType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 10\n        }\n      });\n    });\n  })));\n};\n\nexport default FilterResultsPage;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/templates/ResourceArchive/FilterResultsPage.js"],"names":["React","gql","Query","LoadingSpinner","ResourceItem","ResourceConstants","ResourceQueries","BuildGenericResourcesFromNodes","FilterResultsPage","selectedTopics","selectedResourceTypes","submittedSearchText","buildDynamicQuery","dynamicWhereClause","categoryIds","length","t","push","value","join","dynamicQuery","ARTICLES_PARTIAL_QUERY","GENERIC_RESOURCE_PARTIAL_QUERY","GUIDES_PARTIAL_QUERY","PODCASTS_PARTIAL_QUERY","VIDEOS_PARTIAL_QUERY","dynamicQueryPortion","i","resType","Articles","PostType","Podcasts","Videos","Guides","useResourceTypeAsTags","baseClass","loading","error","data","console","genericResources","posts","nodes","articleResources","forEach","res","caseStudies","caseStudyResources","CaseStudy","infographics","infographicResources","Infographics","podcasts","podcastResources","videos","videoResources","whitePapers","whitePaperResources","WhitePapers","guides","guideResources","sortedGenericResources","slice","sort","a","b","Date","date","map","resourceEntry","index","title","excerpt","featuredImage","tagListing","resourceDownloadUrl","resourceType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport gql from 'graphql-tag';\nimport { Query } from \"react-apollo\";\nimport LoadingSpinner from '../../components/LoadingSpinner';\nimport ResourceItem from './ResourceItem';\nimport * as ResourceConstants from './ResourceConstants';\nimport * as ResourceQueries from './ResourceQueries';\nimport { BuildGenericResourcesFromNodes } from './ResourceUtilities';\n\nconst FilterResultsPage = ({ selectedTopics, selectedResourceTypes, submittedSearchText }) => {\n\n\t// console.log('FilterResultsPage.selectedTopic', selectedTopics);\n\t// console.log('FilterResultsPage.selectedResourceType', selectedResourceTypes);\n\n\tconst buildDynamicQuery = () => {\n\n\t\t// if they picked topic(s) then we need a where clause to use in our queries\n\t\t// ex: (where: {search: \"\", categoryIn: [1632]}, first: 50)\n\t\tlet dynamicWhereClause = \"\";\n\t\tlet categoryIds = [];\n\t\tif (selectedTopics && selectedTopics.length > 0) {\n\t\t\tfor (let t = 0; t < selectedTopics.length; t++) {\n\t\t\t\tcategoryIds.push(selectedTopics[t].value);\n\t\t\t}\n\t\t}\n\n\t\tdynamicWhereClause = `(where: {${submittedSearchText !== \"\" ? `search: \"${submittedSearchText}\", ` : ``} ${categoryIds.length > 0 ? `categoryIn: [${categoryIds.join(',')}]` : ``}}, first: 50)`\n\t\t// console.log('dynamicWhereClause', dynamicWhereClause);\n\n\t\t// default to querying for all resource types\n\t\tlet dynamicQuery = gql`\n\t\t\tquery DYNAMIC_RESOURCE_QUERY {\n\t\t\t\tposts${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.ARTICLES_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tcaseStudies${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\twhitePapers${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tguides${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GUIDES_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tinfographics${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tpodcasts${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.PODCASTS_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t\tvideos${dynamicWhereClause} {\n\t\t\t\t\t${ResourceQueries.VIDEOS_PARTIAL_QUERY}\n\t\t\t\t}\n\t\t\t}\n\t\t`;\n\n\t// \tconsole.log('dynamicQuery', `\n\t// \tquery DYNAMIC_RESOURCE_QUERY {\n\t// \t\tposts${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.ARTICLES_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t\tcaseStudies${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t\twhitePapers${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t\tguides${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.GUIDES_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t\tinfographics${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t\tpodcasts${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.PODCASTS_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t\tvideos${dynamicWhereClause} {\n\t// \t\t\t${ResourceQueries.VIDEOS_PARTIAL_QUERY}\n\t// \t\t}\n\t// \t}\n\t// `);\n\n\t\t// if a specific resource type was selected, then instead use a post type specific query\n\t\tif (selectedResourceTypes && selectedResourceTypes.length > 0) {\n\t\t\t// console.log('using specific', selectedResourceTypes[0].value);\n\n\t\t\tlet dynamicQueryPortion = ``;\n\n\t\t\tfor (let i = 0; i < selectedResourceTypes.length; i++) {\n\t\t\t\tlet resType = selectedResourceTypes[i];\n\n\t\t\t\tif (resType.value === ResourceConstants.Articles.PostType) {\n\t\t\t\t\tdynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.ARTICLES_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n\t\t\t\t} else if (resType.value === ResourceConstants.Podcasts.PostType) {\n\t\t\t\t\tdynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.PODCASTS_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n\t\t\t\t}  else if (resType.value === ResourceConstants.Videos.PostType) {\n\t\t\t\t\tdynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.VIDEOS_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n\t\t\t\t}else if (resType.value === ResourceConstants.Guides.PostType) {\n\t\t\t\t\tdynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.GUIDES_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n\t\t\t\t} else {\n\t\t\t\t\tdynamicQueryPortion = dynamicQueryPortion + `\n\t\t\t\t\t\t${resType.value}${dynamicWhereClause} {\n\t\t\t\t\t\t\t${ResourceQueries.GENERIC_RESOURCE_PARTIAL_QUERY}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log('dynamicQueryPortion', dynamicQueryPortion);\n\n\t\t\tdynamicQuery = gql`\n\t\t\t\tquery DYNAMIC_RESOURCE_QUERY {\n\t\t\t\t\t${dynamicQueryPortion}\n\t\t\t\t}`;\n\t\t}\n\n\t\treturn dynamicQuery;\n\t}\n\n\tconst dynamicQuery = buildDynamicQuery();\n\t// console.log('selectedResourceType', selectedResourceTypes);\n\t// RTR-132: if filtering by type then show the category, if filtering by topic then show the type, if filtering by both show the category\n\t// NOTE:: said another way, always show the category unless filtering by topic - then show the resource type\n\tlet useResourceTypeAsTags = false;\n\tif ((selectedTopics && selectedTopics.length > 0) && (!selectedResourceTypes || selectedResourceTypes.length === 0)) {\n\t\tuseResourceTypeAsTags = true;\n\t}\n\n\tconst baseClass = `filter-results-page`;\n\treturn (\n\t\t<div className={`${baseClass} container`}>\n\t\t\t<div className={`row`}>\n\t\t\t\t<div className={`col-12`}>\n\t\t\t\t\t<h5 className={`${baseClass}__header`}>Results</h5>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className={`row ${baseClass}__results-wrapper`}>\n\t\t\t\t<Query query={dynamicQuery}>\n\t\t\t\t\t{({ loading, error, data }) => {\n\t\t\t\t\t\tif (loading) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"col-12\">\n\t\t\t\t\t\t\t\t\t<LoadingSpinner small paddingTopSmall />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tconsole.error('FilterResultsPage unable to query resources!');\n\t\t\t\t\t\t\treturn <p>Error</p>;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// console.log('FilterResultsPage data', data);\n\t\t\t\t\t\tlet genericResources = [];\n\t\t\t\t\t\tif (data.posts && data.posts.nodes) {\n\t\t\t\t\t\t\tconst articleResources = BuildGenericResourcesFromNodes(data.posts.nodes, ResourceConstants.Articles, useResourceTypeAsTags);\n\t\t\t\t\t\t\tarticleResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data.caseStudies && data.caseStudies.nodes) {\n\t\t\t\t\t\t\tconst caseStudyResources = BuildGenericResourcesFromNodes(data.caseStudies.nodes, ResourceConstants.CaseStudy, useResourceTypeAsTags);\n\t\t\t\t\t\t\tcaseStudyResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data.infographics && data.infographics.nodes) {\n\t\t\t\t\t\t\tconst infographicResources = BuildGenericResourcesFromNodes(data.infographics.nodes, ResourceConstants.Infographics, useResourceTypeAsTags);\n\t\t\t\t\t\t\tinfographicResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data.podcasts && data.podcasts.nodes) {\n\t\t\t\t\t\t\tconst podcastResources = BuildGenericResourcesFromNodes(data.podcasts.nodes, ResourceConstants.Podcasts, useResourceTypeAsTags);\n\t\t\t\t\t\t\tpodcastResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data.videos && data.videos.nodes) {\n\t\t\t\t\t\t\tconst videoResources = BuildGenericResourcesFromNodes(data.videos.nodes, ResourceConstants.Videos, useResourceTypeAsTags);\n\t\t\t\t\t\t\tvideoResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data.whitePapers && data.whitePapers.nodes) {\n\t\t\t\t\t\t\tconst whitePaperResources = BuildGenericResourcesFromNodes(data.whitePapers.nodes, ResourceConstants.WhitePapers, useResourceTypeAsTags);\n\t\t\t\t\t\t\twhitePaperResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (data.guides && data.guides.nodes) {\n\t\t\t\t\t\t\tconst guideResources = BuildGenericResourcesFromNodes(data.guides.nodes, ResourceConstants.Guides, useResourceTypeAsTags);\n\t\t\t\t\t\t\tguideResources.forEach((res) => { genericResources.push(res); });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sort with newest first (will intersperse results so they aren't grouped by type)\n\t\t\t\t\t\tconst sortedGenericResources = genericResources.slice().sort((a, b) => (new Date(b.date) - new Date(a.date)));\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tsortedGenericResources.map((resourceEntry, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ResourceItem\n\t\t\t\t\t\t\t\t\t\tkey={`ri-${index}`}\n\t\t\t\t\t\t\t\t\t\ttitle={resourceEntry.title}\n\t\t\t\t\t\t\t\t\t\tdate={resourceEntry.date}\n\t\t\t\t\t\t\t\t\t\texcerpt={resourceEntry.excerpt}\n\t\t\t\t\t\t\t\t\t\tfeaturedImage={resourceEntry.featuredImage}\n\t\t\t\t\t\t\t\t\t\ttagListing={resourceEntry.tagListing}\n\t\t\t\t\t\t\t\t\t\tresourceDownloadUrl={resourceEntry.resourceDownloadUrl}\n\t\t\t\t\t\t\t\t\t\tresourceType={resourceEntry.resourceType} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Query>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nexport default FilterResultsPage;\n"]},"metadata":{},"sourceType":"module"}