{"ast":null,"code":"import { CategoriesToString } from '../../utils/CategoryHelpers';\nimport * as ResourceConstants from './ResourceConstants';\nexport const MakeGenericResourceFromResourceNode = (node, resourceType, useResourceTypeAsTags) => {\n  console.log('node', node);\n  console.log('resourceType', resourceType);\n  console.log('useResourceTypeAsTags', useResourceTypeAsTags);\n  let resourceDownloadUrl = \"\";\n\n  if (resourceType.PostType === ResourceConstants.Articles.PostType) {\n    resourceDownloadUrl = node.link;\n  }\n\n  if (resourceType.PostType === ResourceConstants.Podcasts.PostType) {\n    if (node.podcast_details && node.podcast_details.podcastUrl) {\n      resourceDownloadUrl = node.podcast_details.podcastUrl;\n    }\n  } else if (resourceType.PostType === ResourceConstants.Videos.PostType) {\n    if (node.video_resource && node.video_resource.youtubeUrl) {\n      resourceDownloadUrl = node.video_resource.youtubeUrl;\n    }\n  } else if (resourceType.PostType === ResourceConstants.Guides.PostType) {\n    if (node.single_guide_resources && node.single_guide_resources.guideType === \"url\") {\n      resourceDownloadUrl = node.single_guide_resources.guideLink;\n    } else if (node.single_guide_resources && node.single_guide_resources.guideType === \"pdf\" && node.single_guide_resources.resourceDownload.mediaItemUrl) {\n      resourceDownloadUrl = node.single_guide_resources.resourceDownload.mediaItemUrl;\n    }\n  } else {\n    if (node.single_resource && node.single_resource.resourceDownload && node.single_resource.resourceDownload.mediaItemUrl) {\n      resourceDownloadUrl = node.single_resource.resourceDownload.mediaItemUrl;\n    }\n  }\n\n  let tagListing = resourceType.SingularName;\n\n  if (!useResourceTypeAsTags) {\n    tagListing = CategoriesToString(node.categories);\n  }\n\n  const genericResource = {\n    title: node.title,\n    date: node.date,\n    excerpt: node.excerpt,\n    featuredImage: node.featuredImage,\n    tagListing: tagListing,\n    resourceDownloadUrl: resourceDownloadUrl,\n    resourceType: resourceType\n  };\n  return genericResource;\n};\nexport const BuildGenericResourcesFromNodes = (nodes, resourceType, useResourceTypeAsTags) => {\n  let genericResources = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    let node = nodes[i];\n    const genericResource = MakeGenericResourceFromResourceNode(node, resourceType, useResourceTypeAsTags);\n    genericResources.push(genericResource);\n  } // console.log('genericResources', genericResources);\n\n\n  return genericResources;\n};","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/templates/ResourceArchive/ResourceUtilities.js"],"names":["CategoriesToString","ResourceConstants","MakeGenericResourceFromResourceNode","node","resourceType","useResourceTypeAsTags","console","log","resourceDownloadUrl","PostType","Articles","link","Podcasts","podcast_details","podcastUrl","Videos","video_resource","youtubeUrl","Guides","single_guide_resources","guideType","guideLink","resourceDownload","mediaItemUrl","single_resource","tagListing","SingularName","categories","genericResource","title","date","excerpt","featuredImage","BuildGenericResourcesFromNodes","nodes","genericResources","i","length","push"],"mappings":"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","sourcesContent":["import { CategoriesToString } from '../../utils/CategoryHelpers';\nimport * as ResourceConstants from './ResourceConstants';\n\nexport const MakeGenericResourceFromResourceNode = (node, resourceType, useResourceTypeAsTags) => {\n\tconsole.log('node', node);\n\tconsole.log('resourceType', resourceType);\n\tconsole.log('useResourceTypeAsTags', useResourceTypeAsTags);\n\tlet resourceDownloadUrl = \"\";\n\n\tif (resourceType.PostType === ResourceConstants.Articles.PostType) {\n\t\tresourceDownloadUrl = node.link;\n\t}\n\tif (resourceType.PostType === ResourceConstants.Podcasts.PostType) {\n\t\tif (node.podcast_details && node.podcast_details.podcastUrl) {\n\t\t\tresourceDownloadUrl = node.podcast_details.podcastUrl;\n\t\t}\n\t} else if (resourceType.PostType === ResourceConstants.Videos.PostType) {\n\t\tif (node.video_resource && node.video_resource.youtubeUrl) {\n\t\t\tresourceDownloadUrl = node.video_resource.youtubeUrl;\n\t\t}\n\t} else if (resourceType.PostType === ResourceConstants.Guides.PostType) {\n\t\tif (node.single_guide_resources && node.single_guide_resources.guideType  === \"url\") {\n\t\t\tresourceDownloadUrl = node.single_guide_resources.guideLink;\n\t\t} else if(node.single_guide_resources && node.single_guide_resources.guideType  === \"pdf\" && node.single_guide_resources.resourceDownload.mediaItemUrl) {\n\t\t\tresourceDownloadUrl = node.single_guide_resources.resourceDownload.mediaItemUrl;\n\t\t}\n\t} else {\n\t\tif (node.single_resource && node.single_resource.resourceDownload && node.single_resource.resourceDownload.mediaItemUrl) {\n\t\t\tresourceDownloadUrl = node.single_resource.resourceDownload.mediaItemUrl;\n\t\t}\n\t\t \n\t}\n\n\tlet tagListing = resourceType.SingularName;\n\tif (!useResourceTypeAsTags) {\n\t\ttagListing = CategoriesToString(node.categories);\n\t}\n\n\tconst genericResource = {\n\t\ttitle: node.title,\n\t\tdate: node.date,\n\t\texcerpt: node.excerpt,\n\t\tfeaturedImage: node.featuredImage,\n\t\ttagListing: tagListing,\n\t\tresourceDownloadUrl: resourceDownloadUrl,\n\t\tresourceType: resourceType\n\t}\n\n\treturn genericResource;\n}\n\nexport const BuildGenericResourcesFromNodes = (nodes, resourceType, useResourceTypeAsTags) => {\n\tlet genericResources = [];\n\tfor (let i = 0; i < nodes.length; i++) {\n\t\tlet node = nodes[i];\n\t\tconst genericResource = MakeGenericResourceFromResourceNode(node, resourceType, useResourceTypeAsTags);\n\n\t\tgenericResources.push(genericResource);\n\t}\n\n\t// console.log('genericResources', genericResources);\n\treturn genericResources;\n}\n"]},"metadata":{},"sourceType":"module"}