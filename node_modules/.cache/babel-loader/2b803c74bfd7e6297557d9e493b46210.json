{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\index.js\";\nimport React, { Component } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport RenderFields from \"./FormElements/RenderFields\";\nimport FormError from \"./FormElements/FormError\";\nimport FormConfirmation from \"./FormElements/FormConfirmation\";\nimport { validateField } from \"./Helpers/validation\";\nimport Submit from \"./FormElements/Submit\";\n\nclass GravityForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetForm = () => {\n      this.setState({\n        submitFailed: false,\n        errorMessages: false,\n        loading: false,\n        submitting: false,\n        submitSuccess: false,\n        confirmationMessage: false,\n        isValid: false\n      });\n      this.componentDidMount();\n    };\n\n    this.setTouched = id => {\n      this.setState({\n        touched: { ...this.state.touched,\n          [id]: true\n        }\n      });\n    };\n\n    this.unsetError = id => {\n      const {\n        errorMessages\n      } = this.state;\n      if (!errorMessages) return;\n\n      if (errorMessages[id]) {\n        delete errorMessages[id];\n        this.setState({\n          errorMessages\n        });\n      }\n    };\n\n    this.updateFormHandler = (event, field) => {\n      const {\n        formValues,\n        conditioanlIds,\n        conditionFields\n      } = this.state;\n      let {\n        id,\n        type\n      } = field; // Set new value\n\n      let value;\n\n      if (field.type === \"checkbox\") {\n        const values = [...formValues[field.id].value];\n        const index = values.indexOf(event.target.value);\n\n        if (index > -1) {\n          values.splice(index, 1);\n        } else {\n          values.push(event.target.value);\n        }\n\n        value = values;\n      } else if (field.type === \"date\" && field.dateType !== \"datepicker\") {\n        const {\n          subId,\n          dateLabel\n        } = field;\n        const values = [...formValues[field.id].value];\n        values[subId] = {\n          val: event.target.value,\n          label: dateLabel\n        };\n        value = values;\n      } else if (field.type === \"consent\") {\n        value = event.target ? event.target.checked : \"null\";\n      } else if (field.type === \"password\") {\n        const {\n          subId\n        } = field;\n        const values = formValues[field.id] && formValues[field.id].value ? [...formValues[field.id].value] : [];\n        values[subId] = {\n          val: event.target.value\n        };\n        value = values;\n      } else {\n        value = event.target ? event.target.value : \"null\";\n      } // if field is IBAN\n\n\n      if (type === \"text\" && field.cssClass.indexOf(\"iban\") > -1) {\n        type = \"iban\";\n      } // Validate field\n\n\n      const valid = validateField(value, field); // if field ID is somewhere in conditional fields\n      // recalculate all conditions\n\n      if (conditioanlIds.indexOf(id) !== -1) {\n        formValues[id].value = value;\n\n        for (let i = 0; i < conditionFields.length; i++) {\n          const {\n            id\n          } = conditionFields[i];\n          const hide = this.checkConditionalLogic(conditionFields[i].conditionalLogic, formValues);\n          formValues[id].hideField = hide;\n\n          if (hide) {\n            if (formValues[id].isRequired && hide) {\n              formValues[id].value = \"\";\n            }\n\n            formValues[id].valid = !!formValues[id].isRequired;\n          }\n        }\n      }\n\n      this.setState({\n        formValues: { ...formValues,\n          [id]: {\n            value,\n            id,\n            valid,\n            label: field.label,\n            pageNumber: field.pageNumber,\n            cssClass: field.cssClass,\n            isRequired: field.isRequired\n          }\n        }\n      }, () => {\n        // pass state to parent component\n        const {\n          onChange\n        } = this.props;\n\n        if (onChange) {\n          onChange(this.state.formValues);\n        }\n      });\n    };\n\n    this.scrollToConfirmation = () => {\n      const rect = this.wrapperRef ? this.wrapperRef.getBoundingClientRect() : false;\n\n      if (rect && window) {\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        window.scrollTo({\n          top: scrollTop + rect.top - 100\n        });\n      }\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      this.setState({\n        submitting: true,\n        submitSuccess: false,\n        submitFailed: false,\n        confirmationMessage: false,\n        errorMessages: false\n      });\n      const {\n        formID,\n        backendUrl,\n        jumpToConfirmation,\n        onSubmitSuccess,\n        handleRedirectSuccessWithMessage\n      } = this.props;\n      const gfSubmissionUrl = backendUrl.substring(0, backendUrl.indexOf(\"/wp-json\"));\n      const data = new FormData(event.target);\n      fetch(`${gfSubmissionUrl}/wp-json/gf/v2/forms/${formID}/submissions`, {\n        method: \"POST\",\n        body: data\n      }).then(resp => resp.json()).then(response => {\n        if (response && response.is_valid) {\n          if (onSubmitSuccess) {\n            const res = onSubmitSuccess(response);\n\n            if (!res) {\n              return false;\n            }\n          }\n\n          if (response.confirmation_type && response.confirmation_redirect && response.confirmation_type === \"redirect\") {\n            if (handleRedirectSuccessWithMessage && handleRedirectSuccessWithMessage !== \"\") {\n              // post to confirmation redirect URL quietly\n              fetch(response.confirmation_redirect, {\n                mode: 'no-cors'\n              }).then(response => {\n                this.setState({\n                  submitting: false,\n                  submitSuccess: true,\n                  confirmationMessage: handleRedirectSuccessWithMessage\n                });\n              }).catch(error => {\n                // handle your errors here\n                console.error('Quiet redirect failed with error', error);\n                this.setState({\n                  submitting: false,\n                  submitSuccess: false,\n                  errorMessage: \"Something went wrong with quiet redirect\"\n                });\n              });\n              return false;\n            }\n\n            if (typeof window !== \"undefined\") {\n              window.location.replace(response.confirmation_redirect);\n              return false;\n            }\n          }\n\n          this.setState({\n            submitting: false,\n            submitSuccess: true,\n            confirmationMessage: response.confirmation_message\n          });\n\n          if (jumpToConfirmation) {\n            this.scrollToConfirmation();\n          }\n        } else {\n          this.setState({\n            submitting: false,\n            submitFailed: true,\n            errorMessage: \"Something went wrong\"\n          });\n        }\n      }).catch(error => {\n        this.setState({\n          submitting: false,\n          submitFailed: true,\n          errorMessages: error.response.validation_messages\n        });\n      });\n    };\n\n    this.nextStep = e => {\n      e.preventDefault();\n      const {\n        activePage\n      } = this.state;\n      this.setState({\n        activePage: activePage + 1\n      }, () => this.scrollToConfirmation());\n    };\n\n    this.prevStep = e => {\n      e.preventDefault();\n      const {\n        activePage\n      } = this.state;\n      this.setState({\n        activePage: activePage - 1\n      }, () => this.scrollToConfirmation());\n    };\n\n    this.checkConditionalLogic = (condition, fields = false) => {\n      const {\n        rules,\n        actionType\n      } = condition;\n      if (!rules) return true;\n      const formValues = fields || this.state.formValues; // show only if is selected \"All fields\" (it should be tweaked in future)\n      // works only \"show/hide when field is equal to\"\n\n      let hideField = actionType !== \"hide\";\n      const hideBasedOnRules = [];\n\n      for (let i = 0; i < rules.length; i++) {\n        const {\n          fieldId,\n          value,\n          operator\n        } = rules[i];\n        const conditionFieldValue = formValues[fieldId].value && formValues[fieldId].value.value ? formValues[fieldId].value.value : formValues[fieldId].value || false;\n        const stringValue = Array.isArray(conditionFieldValue) ? conditionFieldValue.join(\"\") : conditionFieldValue; // Check if comparision value is empty\n\n        if (!value) {\n          if (!stringValue && !value) {\n            hideBasedOnRules[i] = actionType === \"hide\";\n          } else {\n            hideBasedOnRules[i] = actionType !== \"hide\";\n          }\n        } else if (stringValue && value === stringValue) {\n          hideBasedOnRules[i] = actionType === \"hide\";\n        } else {\n          hideBasedOnRules[i] = actionType !== \"hide\";\n        } // If operator is 'isnot' reverse value\n\n\n        if (operator === \"isnot\") {\n          hideBasedOnRules[i] = !hideBasedOnRules[i];\n        }\n      }\n\n      hideField = hideBasedOnRules.every(i => i === true); // formValues[id].hideField = hideField;\n      // this.setState({ formValues });\n\n      return hideField;\n    };\n\n    this.state = {\n      submitFailed: false,\n      errorMessages: false,\n      formValues: {},\n      loading: true,\n      submitting: false,\n      submitSuccess: false,\n      confirmationMessage: false,\n      isValid: false,\n      formData: {},\n      touched: {},\n      activePage: false,\n      conditionFields: {},\n      conditioanlIds: {},\n      isMultipart: false\n    };\n  } // RFP:: helper method to reset the form\n\n\n  async componentDidMount() {\n    const {\n      formID,\n      backendUrl,\n      populatedFields\n    } = this.props;\n    const {\n      authString\n    } = this.props; // EXT:: we have to pass in auth string\n\n    this._isMounted = true;\n    let isMultipart = false;\n    const form = await fetch(`${backendUrl}/${formID}`, {\n      // EXT:: we have to setup headers with authstring\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Basic ${authString}`\n      }\n    }).then(resp => resp.json()).then(response => response).catch(() => false);\n\n    if (form && this._isMounted) {\n      const formValues = {};\n      const conditionFields = [];\n      const conditioanlIds = []; // eslint-disable-next-line no-restricted-syntax\n\n      if (!form.fields) return;\n\n      for (const field of form.fields) {\n        let value;\n        const hasPopulation = field.inputName && populatedFields && populatedFields[field.inputName];\n\n        if (field.type === \"checkbox\") {\n          value = field.choices.filter(choice => hasPopulation ? choice.value === populatedFields[field.inputName] : choice.isSelected).map(choice => choice.value);\n        } else if (field.type === \"radio\") {\n          if (hasPopulation) {\n            value = populatedFields[field.inputName];\n          } else {\n            const preselected = field.choices.find(choice => choice.isSelected);\n            value = preselected ? preselected.value : \"\";\n          }\n        } else if (field.type === \"select\") {\n          const selectedOption = field.choices.filter(choice => hasPopulation ? choice.value === populatedFields[field.inputName] : choice.isSelected).map(item => ({\n            value: item.value,\n            label: item.text\n          }));\n          value = selectedOption && selectedOption.length > 0 ? selectedOption[0] : \"\";\n        } else {\n          value = hasPopulation ? populatedFields[field.inputName] : field.defaultValue;\n\n          if (field.type === \"fileupload\") {\n            isMultipart = true;\n          }\n        } // grab all conditional logic fields\n\n\n        if (field.conditionalLogic) {\n          const tmpField = {\n            id: field.id,\n            conditionalLogic: field.conditionalLogic\n          };\n          const ids = field.conditionalLogic.rules.map(item => item.fieldId);\n\n          for (let i = 0; i < ids.length; i++) {\n            const id = parseInt(ids[i]);\n\n            if (conditioanlIds.indexOf(id) === -1) {\n              conditioanlIds.push(id);\n            }\n          }\n\n          conditionFields.push(tmpField);\n        }\n\n        formValues[field.id] = {\n          valid: validateField(value, field),\n          value,\n          label: field.label,\n          pageNumber: field.pageNumber,\n          cssClass: field.cssClass,\n          isRequired: field.isRequired\n        };\n      } // check condition logic\n\n\n      for (let i = 0; i < conditionFields.length; i++) {\n        formValues[conditionFields[i].id].hideField = this.checkConditionalLogic(conditionFields[i].conditionalLogic, formValues);\n      }\n\n      this.setState({\n        formData: form,\n        formValues,\n        activePage: form.pagination ? 1 : false,\n        conditionFields,\n        conditioanlIds,\n        isMultipart\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      formData,\n      formValues,\n      submitFailed,\n      submitSuccess,\n      touched,\n      submitting,\n      activePage,\n      isMultipart\n    } = this.state;\n    const {\n      submitIcon,\n      saveStateToHtmlField,\n      styledComponents,\n      customComponents,\n      errorMessage,\n      dropzoneText\n    } = this.props;\n    const {\n      Button,\n      Loading,\n      GFWrapper = \"div\",\n      FormError: SFormError\n    } = styledComponents || false;\n    const {\n      cssClass\n    } = formData;\n    const isDisabled = Object.keys(formValues).some(x => !formValues[x].hideField && formValues[x].valid);\n    const isNextDisabled = activePage ? Object.keys(formValues).some(x => formValues[x].pageNumber === activePage && !formValues[x].hideField && formValues[x].valid) : false;\n    return /*#__PURE__*/React.createElement(GFWrapper, {\n      ref: el => this.wrapperRef = el,\n      className: \"form-wrapper\",\n      css: {\n        position: \"relative\"\n      },\n      id: `gravity_form_${this.props.formID}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 7\n      }\n    }, formData.title ? null : Loading && /*#__PURE__*/React.createElement(Loading, {\n      isLoading: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 45\n      }\n    }), submitFailed && !submitSuccess && /*#__PURE__*/React.createElement(FormError, {\n      SFormError: SFormError || false,\n      errorMessage: errorMessage || \"There was a problem with your submission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }\n    }), submitSuccess && this.state.confirmationMessage && /*#__PURE__*/React.createElement(FormConfirmation, {\n      confirmation: this.state.confirmationMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }\n    }), !submitSuccess && formData.fields ? /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: e => this.onSubmit(e),\n      className: cssClass,\n      encType: isMultipart ? \"multipart/form-data\" : undefined,\n      noValidate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RenderFields, {\n      styledComponents: styledComponents,\n      customComponents: customComponents,\n      fields: formData.fields,\n      formValues: formValues,\n      submitFailed: submitFailed,\n      submitSuccess: submitSuccess,\n      updateForm: this.updateFormHandler,\n      touched: touched,\n      setTouched: this.setTouched,\n      pagination: formData.pagination,\n      activePage: activePage,\n      prevStep: this.prevStep,\n      nextStep: this.nextStep,\n      isNextDisabled: isNextDisabled,\n      checkConditionalLogic: this.checkConditionalLogic,\n      saveStateToHtmlField: saveStateToHtmlField,\n      enableHoneypot: formData.enableHoneypot,\n      errors: this.state.errorMessages,\n      unsetError: this.unsetError,\n      dropzoneText: dropzoneText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 15\n      }\n    }), (!formData.pagination || formData.pagination && formData.pagination.pages.length === activePage) && /*#__PURE__*/React.createElement(Submit, {\n      Button: Button,\n      Loading: Loading,\n      formData: formData,\n      submitIcon: submitIcon,\n      isDisabled: isDisabled,\n      submitting: submitting,\n      prevStep: this.prevStep,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }))) : \"\");\n  }\n\n}\n\nGravityForm.defaultProps = {\n  title: true,\n  submitIcon: false,\n  saveStateToHtmlField: false,\n  jumpToConfirmation: true\n};\nexport { validateField, FormConfirmation, FormError, RenderFields, Submit };\nexport default GravityForm;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/index.js"],"names":["React","Component","fetch","RenderFields","FormError","FormConfirmation","validateField","Submit","GravityForm","constructor","props","resetForm","setState","submitFailed","errorMessages","loading","submitting","submitSuccess","confirmationMessage","isValid","componentDidMount","setTouched","id","touched","state","unsetError","updateFormHandler","event","field","formValues","conditioanlIds","conditionFields","type","value","values","index","indexOf","target","splice","push","dateType","subId","dateLabel","val","label","checked","cssClass","valid","i","length","hide","checkConditionalLogic","conditionalLogic","hideField","isRequired","pageNumber","onChange","scrollToConfirmation","rect","wrapperRef","getBoundingClientRect","window","scrollTop","pageYOffset","document","documentElement","scrollTo","top","onSubmit","preventDefault","formID","backendUrl","jumpToConfirmation","onSubmitSuccess","handleRedirectSuccessWithMessage","gfSubmissionUrl","substring","data","FormData","method","body","then","resp","json","response","is_valid","res","confirmation_type","confirmation_redirect","mode","catch","error","console","errorMessage","location","replace","confirmation_message","validation_messages","nextStep","e","activePage","prevStep","condition","fields","rules","actionType","hideBasedOnRules","fieldId","operator","conditionFieldValue","stringValue","Array","isArray","join","every","formData","isMultipart","populatedFields","authString","_isMounted","form","headers","Accept","hasPopulation","inputName","choices","filter","choice","isSelected","map","preselected","find","selectedOption","item","text","defaultValue","tmpField","ids","parseInt","pagination","componentWillUnmount","render","submitIcon","saveStateToHtmlField","styledComponents","customComponents","dropzoneText","Button","Loading","GFWrapper","SFormError","isDisabled","Object","keys","some","x","isNextDisabled","el","position","title","undefined","enableHoneypot","pages","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport RenderFields from \"./FormElements/RenderFields\";\nimport FormError from \"./FormElements/FormError\";\nimport FormConfirmation from \"./FormElements/FormConfirmation\";\nimport { validateField } from \"./Helpers/validation\";\nimport Submit from \"./FormElements/Submit\";\n\nclass GravityForm extends Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n      submitFailed: false,\n      errorMessages: false,\n      formValues: {},\n      loading: true,\n      submitting: false,\n      submitSuccess: false,\n      confirmationMessage: false,\n      isValid: false,\n      formData: {},\n      touched: {},\n      activePage: false,\n      conditionFields: {},\n      conditioanlIds: {},\n      isMultipart: false\n    };\n  }\n\n  // RFP:: helper method to reset the form\n  resetForm = () => {\n    this.setState({\n      submitFailed: false,\n      errorMessages: false,\n      loading: false,\n      submitting: false,\n      submitSuccess: false,\n      confirmationMessage: false,\n      isValid: false\n    });\n\n    this.componentDidMount();\n  }\n\n  async componentDidMount() {\n    const { formID, backendUrl, populatedFields } = this.props;\n    const { authString } = this.props; // EXT:: we have to pass in auth string\n    this._isMounted = true;\n    let isMultipart = false;\n    const form = await fetch(`${backendUrl}/${formID}`, {\n      // EXT:: we have to setup headers with authstring\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Basic ${authString}`\n      }\n    })\n    .then(resp => resp.json())\n    .then(response => response)\n    .catch(() => false);\n    if (form && this._isMounted) {\n      const formValues = {};\n      const conditionFields = [];\n      const conditioanlIds = [];\n      // eslint-disable-next-line no-restricted-syntax\n      if(!form.fields) return;\n      for (const field of form.fields) {\n        let value;\n        const hasPopulation =\n          field.inputName &&\n          populatedFields &&\n          populatedFields[field.inputName];\n        if (field.type === \"checkbox\") {\n          value = field.choices\n            .filter(choice =>\n              hasPopulation\n                ? choice.value === populatedFields[field.inputName]\n                : choice.isSelected\n            )\n            .map(choice => choice.value);\n        } else if (field.type === \"radio\") {\n          if (hasPopulation) {\n            value = populatedFields[field.inputName];\n          } else {\n            const preselected = field.choices.find(choice => choice.isSelected);\n            value = preselected ? preselected.value : \"\";\n          }\n        } else if (field.type === \"select\") {\n          const selectedOption = field.choices\n            .filter(choice =>\n              hasPopulation\n                ? choice.value === populatedFields[field.inputName]\n                : choice.isSelected\n            )\n            .map(item => ({ value: item.value, label: item.text }));\n          value =\n            selectedOption && selectedOption.length > 0\n              ? selectedOption[0]\n              : \"\";\n        } else {\n          value = hasPopulation\n            ? populatedFields[field.inputName]\n            : field.defaultValue;\n          if (field.type === \"fileupload\") {\n            isMultipart = true;\n          }\n        }\n\n        // grab all conditional logic fields\n        if (field.conditionalLogic) {\n          const tmpField = {\n            id: field.id,\n            conditionalLogic: field.conditionalLogic\n          };\n          const ids = field.conditionalLogic.rules.map(item => item.fieldId);\n          for (let i = 0; i < ids.length; i++) {\n            const id = parseInt(ids[i]);\n            if (conditioanlIds.indexOf(id) === -1) {\n              conditioanlIds.push(id);\n            }\n          }\n          conditionFields.push(tmpField);\n        }\n\n        formValues[field.id] = {\n          valid: validateField(value, field),\n          value,\n          label: field.label,\n          pageNumber: field.pageNumber,\n          cssClass: field.cssClass,\n          isRequired: field.isRequired\n        };\n      }\n      // check condition logic\n      for (let i = 0; i < conditionFields.length; i++) {\n        formValues[\n          conditionFields[i].id\n        ].hideField = this.checkConditionalLogic(\n          conditionFields[i].conditionalLogic,\n          formValues\n        );\n      }\n\n      this.setState({\n        formData: form,\n        formValues,\n        activePage: form.pagination ? 1 : false,\n        conditionFields,\n        conditioanlIds,\n        isMultipart\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setTouched = id => {\n    this.setState({\n      touched: { ...this.state.touched, [id]: true }\n    });\n  };\n\n  unsetError = id => {\n    const { errorMessages } = this.state;\n    if (!errorMessages) return;\n\n    if (errorMessages[id]) {\n      delete errorMessages[id];\n      this.setState({ errorMessages });\n    }\n  };\n\n  updateFormHandler = (event, field) => {\n    const { formValues, conditioanlIds, conditionFields } = this.state;\n    let { id, type } = field;\n    // Set new value\n    let value;\n    if (field.type === \"checkbox\") {\n      const values = [...formValues[field.id].value];\n      const index = values.indexOf(event.target.value);\n      if (index > -1) {\n        values.splice(index, 1);\n      } else {\n        values.push(event.target.value);\n      }\n      value = values;\n    } else if (field.type === \"date\" && field.dateType !== \"datepicker\") {\n      const { subId, dateLabel } = field;\n      const values = [...formValues[field.id].value];\n      values[subId] = {\n        val: event.target.value,\n        label: dateLabel\n      };\n      value = values;\n    } else if (field.type === \"consent\") {\n      value = event.target ? event.target.checked : \"null\";\n    } else if (field.type === \"password\") {\n      const { subId } = field;\n      const values =\n        formValues[field.id] && formValues[field.id].value\n          ? [...formValues[field.id].value]\n          : [];\n      values[subId] = {\n        val: event.target.value\n      };\n      value = values;\n    } else {\n      value = event.target ? event.target.value : \"null\";\n    }\n    // if field is IBAN\n    if (type === \"text\" && field.cssClass.indexOf(\"iban\") > -1) {\n      type = \"iban\";\n    }\n\n    // Validate field\n    const valid = validateField(value, field);\n\n    // if field ID is somewhere in conditional fields\n    // recalculate all conditions\n    if (conditioanlIds.indexOf(id) !== -1) {\n      formValues[id].value = value;\n      for (let i = 0; i < conditionFields.length; i++) {\n        const { id } = conditionFields[i];\n        const hide = this.checkConditionalLogic(\n          conditionFields[i].conditionalLogic,\n          formValues\n        );\n        formValues[id].hideField = hide;\n        if (hide) {\n          if (formValues[id].isRequired && hide) {\n            formValues[id].value = \"\";\n          }\n          formValues[id].valid = !!formValues[id].isRequired;\n        }\n      }\n    }\n\n    this.setState(\n      {\n        formValues: {\n          ...formValues,\n          [id]: {\n            value,\n            id,\n            valid,\n            label: field.label,\n            pageNumber: field.pageNumber,\n            cssClass: field.cssClass,\n            isRequired: field.isRequired\n          }\n        }\n      },\n      () => {\n        // pass state to parent component\n        const { onChange } = this.props;\n        if (onChange) {\n          onChange(this.state.formValues);\n        }\n      }\n    );\n  };\n\n  scrollToConfirmation = () => {\n    const rect = this.wrapperRef\n      ? this.wrapperRef.getBoundingClientRect()\n      : false;\n    if (rect && window) {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      window.scrollTo({\n        top: scrollTop + rect.top - 100\n      });\n    }\n  };\n\n  onSubmit = async event => {\n    event.preventDefault();\n    this.setState({\n      submitting: true,\n      submitSuccess: false,\n      submitFailed: false,\n      confirmationMessage: false,\n      errorMessages: false\n    });\n    const {\n      formID,\n      backendUrl,\n      jumpToConfirmation,\n\t  onSubmitSuccess,\n\t  handleRedirectSuccessWithMessage\n    } = this.props;\n    const gfSubmissionUrl = backendUrl.substring(\n      0,\n      backendUrl.indexOf(\"/wp-json\")\n    );\n    const data = new FormData(event.target);\n\n    fetch(`${gfSubmissionUrl}/wp-json/gf/v2/forms/${formID}/submissions`, {\n      method: \"POST\",\n      body: data\n    })\n      .then(resp => resp.json())\n      .then(response => {\n        if (response && response.is_valid) {\n          if (onSubmitSuccess) {\n            const res = onSubmitSuccess(response);\n            if (!res) {\n              return false;\n            }\n          }\n\n          if (response.confirmation_type && response.confirmation_redirect && response.confirmation_type === \"redirect\") {\n            if (handleRedirectSuccessWithMessage && handleRedirectSuccessWithMessage !== \"\") {\n              // post to confirmation redirect URL quietly\n              fetch(response.confirmation_redirect, { mode: 'no-cors'})\n              .then(response => {\n                this.setState({\n                  submitting: false,\n                  submitSuccess: true,\n                  confirmationMessage: handleRedirectSuccessWithMessage\n                });\n              })\n              .catch((error) => {\n                // handle your errors here\n                console.error('Quiet redirect failed with error', error);\n                this.setState({\n                  submitting: false,\n\t\t\t\t  submitSuccess: false,\n\t\t\t\t  errorMessage: \"Something went wrong with quiet redirect\"\n                });\n              })\n\n              return false;\n            }\n            if (typeof window !== \"undefined\") {\n              window.location.replace(response.confirmation_redirect);\n              return false;\n            }\n          }\n          this.setState({\n            submitting: false,\n            submitSuccess: true,\n            confirmationMessage: response.confirmation_message\n          });\n          if (jumpToConfirmation) {\n            this.scrollToConfirmation();\n          }\n        } else {\n          this.setState({\n            submitting: false,\n            submitFailed: true,\n            errorMessage: \"Something went wrong\"\n          });\n        }\n      })\n      .catch(error => {\n        this.setState({\n          submitting: false,\n          submitFailed: true,\n          errorMessages: error.response.validation_messages\n        });\n      });\n  };\n\n  nextStep = e => {\n    e.preventDefault();\n    const { activePage } = this.state;\n    this.setState(\n      {\n        activePage: activePage + 1\n      },\n      () => this.scrollToConfirmation()\n    );\n  };\n\n  prevStep = e => {\n    e.preventDefault();\n    const { activePage } = this.state;\n    this.setState(\n      {\n        activePage: activePage - 1\n      },\n      () => this.scrollToConfirmation()\n    );\n  };\n\n  checkConditionalLogic = (condition, fields = false) => {\n    const { rules, actionType } = condition;\n    if (!rules) return true;\n\n    const formValues = fields || this.state.formValues;\n\n    // show only if is selected \"All fields\" (it should be tweaked in future)\n    // works only \"show/hide when field is equal to\"\n    let hideField = actionType !== \"hide\";\n    const hideBasedOnRules = [];\n    for (let i = 0; i < rules.length; i++) {\n      const { fieldId, value, operator } = rules[i];\n      const conditionFieldValue =\n        formValues[fieldId].value && formValues[fieldId].value.value\n          ? formValues[fieldId].value.value\n          : formValues[fieldId].value || false;\n\n      const stringValue = Array.isArray(conditionFieldValue)\n        ? conditionFieldValue.join(\"\")\n        : conditionFieldValue;\n\n      // Check if comparision value is empty\n      if (!value) {\n        if (!stringValue && !value) {\n          hideBasedOnRules[i] = actionType === \"hide\";\n        } else {\n          hideBasedOnRules[i] = actionType !== \"hide\";\n        }\n      } else if (stringValue && value === stringValue) {\n        hideBasedOnRules[i] = actionType === \"hide\";\n      } else {\n        hideBasedOnRules[i] = actionType !== \"hide\";\n      }\n\n      // If operator is 'isnot' reverse value\n      if (operator === \"isnot\") {\n        hideBasedOnRules[i] = !hideBasedOnRules[i];\n      }\n    }\n    hideField = hideBasedOnRules.every(i => i === true);\n    // formValues[id].hideField = hideField;\n    // this.setState({ formValues });\n    return hideField;\n  };\n\n  render() {\n    const {\n      formData,\n      formValues,\n      submitFailed,\n      submitSuccess,\n      touched,\n      submitting,\n      activePage,\n      isMultipart\n    } = this.state;\n    const {\n      submitIcon,\n      saveStateToHtmlField,\n      styledComponents,\n      customComponents,\n      errorMessage,\n      dropzoneText\n    } = this.props;\n    const { Button, Loading, GFWrapper = \"div\", FormError: SFormError } =\n      styledComponents || false;\n\n    const { cssClass } = formData;\n\n    const isDisabled = Object.keys(formValues).some(\n      x => !formValues[x].hideField && formValues[x].valid\n    );\n    const isNextDisabled = activePage\n      ? Object.keys(formValues).some(\n          x =>\n            formValues[x].pageNumber === activePage &&\n            !formValues[x].hideField &&\n            formValues[x].valid\n        )\n      : false;\n\n    return (\n      <GFWrapper\n        ref={el => (this.wrapperRef = el)}\n        className=\"form-wrapper\"\n        css={{ position: \"relative\" }}\n        id={`gravity_form_${this.props.formID}`}\n      >\n        {formData.title ? null : Loading && <Loading isLoading />}\n\n        {submitFailed && !submitSuccess && (\n          <FormError\n            SFormError={SFormError || false}\n            errorMessage={\n              errorMessage || \"There was a problem with your submission\"\n            }\n          />\n        )}\n\n        {submitSuccess && this.state.confirmationMessage && (\n          <FormConfirmation confirmation={this.state.confirmationMessage} />\n        )}\n\n        {!submitSuccess && formData.fields ? (\n          <form\n            onSubmit={e => this.onSubmit(e)}\n            className={cssClass}\n            encType={isMultipart ? \"multipart/form-data\" : undefined}\n            noValidate\n          >\n\n            <div className=\"form-wrapper\">\n              <RenderFields\n                styledComponents={styledComponents}\n                customComponents={customComponents}\n                fields={formData.fields}\n                formValues={formValues}\n                submitFailed={submitFailed}\n                submitSuccess={submitSuccess}\n                updateForm={this.updateFormHandler}\n                touched={touched}\n                setTouched={this.setTouched}\n                pagination={formData.pagination}\n                activePage={activePage}\n                prevStep={this.prevStep}\n                nextStep={this.nextStep}\n                isNextDisabled={isNextDisabled}\n                checkConditionalLogic={this.checkConditionalLogic}\n                saveStateToHtmlField={saveStateToHtmlField}\n                enableHoneypot={formData.enableHoneypot}\n                errors={this.state.errorMessages}\n                unsetError={this.unsetError}\n                dropzoneText={dropzoneText}\n              />\n              {(!formData.pagination ||\n                (formData.pagination &&\n                  formData.pagination.pages.length === activePage)) && (\n                <Submit\n                  Button={Button}\n                  Loading={Loading}\n                  formData={formData}\n                  submitIcon={submitIcon}\n                  isDisabled={isDisabled}\n                  submitting={submitting}\n                  prevStep={this.prevStep}\n                />\n              )}\n            </div>\n          </form>\n        ) : (\n          \"\"\n        )}\n      </GFWrapper>\n    );\n  }\n}\n\nGravityForm.defaultProps = {\n  title: true,\n  submitIcon: false,\n  saveStateToHtmlField: false,\n  jumpToConfirmation: true\n};\n\nexport { validateField, FormConfirmation, FormError, RenderFields, Submit };\n\nexport default GravityForm;\n"]},"metadata":{},"sourceType":"module"}