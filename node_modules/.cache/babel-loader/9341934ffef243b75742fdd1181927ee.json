{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\components\\\\GravityForms\\\\FormElements\\\\RenderFields.jsx\";\nimport React, { useState } from \"react\";\nimport RenderField from \"./RenderField\";\n\nconst divideFieldsIntoPages = (fields, pages) => {\n  const tmpFields = pages.map(item => []);\n\n  for (let i = 0; i < fields.length; i++) {\n    // const arr = tmpFields[fields[i].pageNumber];\n    if (tmpFields[fields[i].pageNumber - 1]) {\n      // move page field to the first group\n      if (fields[i].type === \"page\") {\n        tmpFields[fields[i].pageNumber - 2].push(fields[i]);\n      } else {\n        tmpFields[fields[i].pageNumber - 1].push(fields[i]);\n      }\n    }\n  }\n\n  return tmpFields;\n};\n\nconst getMaxFieldId = fields => {\n  let max = 0;\n\n  for (let i = 0; i < fields.length; i++) {\n    if (parseInt(fields[i].id) > max) {\n      max = parseInt(fields[i].id);\n    }\n  }\n\n  return max + 1;\n};\n\nconst fieldTypes = [\"checkbox\", \"email\", \"hidden\", \"html\", \"number\", \"phone\", \"radio\", \"select\", \"multiselect\", \"text\", \"textarea\", \"website\", \"page\", \"date\", \"fileupload\", \"consent\", \"password\", \"section\", \"custom\"];\nconst honeyPotLables = [\"Name\", \"Email\", \"Phone\", \"Comments\"];\nconst honeypotLabel = honeyPotLables[Math.floor(Math.random() * Math.floor(4))];\nexport default (props => {\n  const {\n    fields,\n    formValues,\n    updateForm,\n    submitFailed,\n    submitSuccess,\n    touched,\n    setTouched,\n    pagination,\n    activePage,\n    prevStep,\n    nextStep,\n    isNextDisabled,\n    checkConditionalLogic,\n    saveStateToHtmlField,\n    enableHoneypot,\n    styledComponents,\n    customComponents,\n    unsetError,\n    errors,\n    dropzoneText\n  } = props; // get page indexes\n\n  const dividedFields = pagination ? divideFieldsIntoPages(fields, pagination.pages) : undefined;\n  const maxID = getMaxFieldId(fields);\n  const [honeypotValue, setHoneypotValue] = useState(\"\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-fields${pagination && pagination.pages.length > 1 ? \" hasPages\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, pagination && pagination.pages.length > 1 ? pagination.pages.map((page, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: `page${activePage === index + 1 ? \" active\" : \"\"}`,\n    key: `page-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, page && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gf_step\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, page)), dividedFields[index].map(field => fieldTypes.includes(field.type) && /*#__PURE__*/React.createElement(RenderField, {\n    key: field.id,\n    field: field,\n    formValues: formValues,\n    submitFailed: submitFailed,\n    setTouched: setTouched,\n    submitSuccess: submitSuccess,\n    updateForm: updateForm,\n    touched: touched,\n    pages: pagination.pages.length,\n    prevStep: prevStep,\n    nextStep: nextStep,\n    isNextDisabled: isNextDisabled,\n    checkConditionalLogic: checkConditionalLogic,\n    saveStateToHtmlField: saveStateToHtmlField,\n    styledComponents: styledComponents,\n    customComponents: customComponents,\n    error: errors && errors[field.id] ? errors[field.id] : false,\n    unsetError: unsetError,\n    dropzoneText: dropzoneText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  })))) : fields.map(field => fieldTypes.includes(field.type) && /*#__PURE__*/React.createElement(RenderField, {\n    key: field.id,\n    field: field,\n    formValues: formValues,\n    submitFailed: submitFailed,\n    setTouched: setTouched,\n    submitSuccess: submitSuccess,\n    updateForm: updateForm,\n    touched: touched,\n    checkConditionalLogic: checkConditionalLogic,\n    styledComponents: styledComponents,\n    error: errors && errors[field.id] ? errors[field.id] : false,\n    unsetError: unsetError,\n    dropzoneText: dropzoneText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  })), enableHoneypot && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-field gform_validation_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: `input_${maxID}`,\n    className: \"gf-label \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, honeypotLabel), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: `input_${maxID}`,\n    id: `input_${maxID}`,\n    value: honeypotValue,\n    onChange: e => setHoneypotValue(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  })));\n});","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/components/GravityForms/FormElements/RenderFields.jsx"],"names":["React","useState","RenderField","divideFieldsIntoPages","fields","pages","tmpFields","map","item","i","length","pageNumber","type","push","getMaxFieldId","max","parseInt","id","fieldTypes","honeyPotLables","honeypotLabel","Math","floor","random","props","formValues","updateForm","submitFailed","submitSuccess","touched","setTouched","pagination","activePage","prevStep","nextStep","isNextDisabled","checkConditionalLogic","saveStateToHtmlField","enableHoneypot","styledComponents","customComponents","unsetError","errors","dropzoneText","dividedFields","undefined","maxID","honeypotValue","setHoneypotValue","page","index","field","includes","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC/C,QAAMC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAUC,IAAI,IAAI,EAAlB,CAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC;AACA,QAAIH,SAAS,CAACF,MAAM,CAACK,CAAD,CAAN,CAAUE,UAAV,GAAuB,CAAxB,CAAb,EAAyC;AACvC;AACA,UAAIP,MAAM,CAACK,CAAD,CAAN,CAAUG,IAAV,KAAmB,MAAvB,EAA+B;AAC7BN,QAAAA,SAAS,CAACF,MAAM,CAACK,CAAD,CAAN,CAAUE,UAAV,GAAuB,CAAxB,CAAT,CAAoCE,IAApC,CAAyCT,MAAM,CAACK,CAAD,CAA/C;AACD,OAFD,MAEO;AACLH,QAAAA,SAAS,CAACF,MAAM,CAACK,CAAD,CAAN,CAAUE,UAAV,GAAuB,CAAxB,CAAT,CAAoCE,IAApC,CAAyCT,MAAM,CAACK,CAAD,CAA/C;AACD;AACF;AACF;;AACD,SAAOH,SAAP;AACD,CAfD;;AAiBA,MAAMQ,aAAa,GAAGV,MAAM,IAAI;AAC9B,MAAIW,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIO,QAAQ,CAACZ,MAAM,CAACK,CAAD,CAAN,CAAUQ,EAAX,CAAR,GAAyBF,GAA7B,EAAkC;AAChCA,MAAAA,GAAG,GAAGC,QAAQ,CAACZ,MAAM,CAACK,CAAD,CAAN,CAAUQ,EAAX,CAAd;AACD;AACF;;AACD,SAAOF,GAAG,GAAG,CAAb;AACD,CARD;;AAUA,MAAMG,UAAU,GAAG,CACjB,UADiB,EAEjB,OAFiB,EAGjB,QAHiB,EAIjB,MAJiB,EAKjB,QALiB,EAMjB,OANiB,EAOjB,OAPiB,EAQjB,QARiB,EASjB,aATiB,EAUjB,MAViB,EAWjB,UAXiB,EAYjB,SAZiB,EAajB,MAbiB,EAcjB,MAdiB,EAejB,YAfiB,EAgBjB,SAhBiB,EAiBjB,UAjBiB,EAkBjB,SAlBiB,EAmBjB,QAnBiB,CAAnB;AAsBA,MAAMC,cAAc,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2B,UAA3B,CAAvB;AACA,MAAMC,aAAa,GAAGD,cAAc,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,CAAX,CAA3B,CAAD,CAApC;AAEA,gBAAeE,KAAK,IAAI;AACtB,QAAM;AACJpB,IAAAA,MADI;AAEJqB,IAAAA,UAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,UARI;AASJC,IAAAA,UATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA,QAXI;AAYJC,IAAAA,cAZI;AAaJC,IAAAA,qBAbI;AAcJC,IAAAA,oBAdI;AAeJC,IAAAA,cAfI;AAgBJC,IAAAA,gBAhBI;AAiBJC,IAAAA,gBAjBI;AAkBJC,IAAAA,UAlBI;AAmBJC,IAAAA,MAnBI;AAoBJC,IAAAA;AApBI,MAqBFnB,KArBJ,CADsB,CAwBtB;;AACA,QAAMoB,aAAa,GAAGb,UAAU,GAC5B5B,qBAAqB,CAACC,MAAD,EAAS2B,UAAU,CAAC1B,KAApB,CADO,GAE5BwC,SAFJ;AAGA,QAAMC,KAAK,GAAGhC,aAAa,CAACV,MAAD,CAA3B;AACA,QAAM,CAAC2C,aAAD,EAAgBC,gBAAhB,IAAoC/C,QAAQ,CAAC,EAAD,CAAlD;AAEA,sBACE;AACE,IAAA,SAAS,EAAG,cACV8B,UAAU,IAAIA,UAAU,CAAC1B,KAAX,CAAiBK,MAAjB,GAA0B,CAAxC,GAA4C,WAA5C,GAA0D,EAC3D,EAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGqB,UAAU,IAAIA,UAAU,CAAC1B,KAAX,CAAiBK,MAAjB,GAA0B,CAAxC,GACGqB,UAAU,CAAC1B,KAAX,CAAiBE,GAAjB,CAAqB,CAAC0C,IAAD,EAAOC,KAAP,kBACnB;AACE,IAAA,SAAS,EAAG,OAAMlB,UAAU,KAAKkB,KAAK,GAAG,CAAvB,GAA2B,SAA3B,GAAuC,EAAG,EAD9D;AAEE,IAAA,GAAG,EAAG,QAAOA,KAAM,EAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGD,IAAI,iBACH;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAP,CADF,CALJ,EASGL,aAAa,CAACM,KAAD,CAAb,CAAqB3C,GAArB,CACC4C,KAAK,IACHjC,UAAU,CAACkC,QAAX,CAAoBD,KAAK,CAACvC,IAA1B,kBACE,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEuC,KAAK,CAAClC,EADb;AAEE,IAAA,KAAK,EAAEkC,KAFT;AAGE,IAAA,UAAU,EAAE1B,UAHd;AAIE,IAAA,YAAY,EAAEE,YAJhB;AAKE,IAAA,UAAU,EAAEG,UALd;AAME,IAAA,aAAa,EAAEF,aANjB;AAOE,IAAA,UAAU,EAAEF,UAPd;AAQE,IAAA,OAAO,EAAEG,OARX;AASE,IAAA,KAAK,EAAEE,UAAU,CAAC1B,KAAX,CAAiBK,MAT1B;AAUE,IAAA,QAAQ,EAAEuB,QAVZ;AAWE,IAAA,QAAQ,EAAEC,QAXZ;AAYE,IAAA,cAAc,EAAEC,cAZlB;AAaE,IAAA,qBAAqB,EAAEC,qBAbzB;AAcE,IAAA,oBAAoB,EAAEC,oBAdxB;AAeE,IAAA,gBAAgB,EAAEE,gBAfpB;AAgBE,IAAA,gBAAgB,EAAEC,gBAhBpB;AAiBE,IAAA,KAAK,EACHE,MAAM,IAAIA,MAAM,CAACS,KAAK,CAAClC,EAAP,CAAhB,GAA6ByB,MAAM,CAACS,KAAK,CAAClC,EAAP,CAAnC,GAAgD,KAlBpD;AAoBE,IAAA,UAAU,EAAEwB,UApBd;AAqBE,IAAA,YAAY,EAAEE,YArBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHL,CATH,CADF,CADH,GAyCGvC,MAAM,CAACG,GAAP,CACE4C,KAAK,IACHjC,UAAU,CAACkC,QAAX,CAAoBD,KAAK,CAACvC,IAA1B,kBACE,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEuC,KAAK,CAAClC,EADb;AAEE,IAAA,KAAK,EAAEkC,KAFT;AAGE,IAAA,UAAU,EAAE1B,UAHd;AAIE,IAAA,YAAY,EAAEE,YAJhB;AAKE,IAAA,UAAU,EAAEG,UALd;AAME,IAAA,aAAa,EAAEF,aANjB;AAOE,IAAA,UAAU,EAAEF,UAPd;AAQE,IAAA,OAAO,EAAEG,OARX;AASE,IAAA,qBAAqB,EAAEO,qBATzB;AAUE,IAAA,gBAAgB,EAAEG,gBAVpB;AAWE,IAAA,KAAK,EAAEG,MAAM,IAAIA,MAAM,CAACS,KAAK,CAAClC,EAAP,CAAhB,GAA6ByB,MAAM,CAACS,KAAK,CAAClC,EAAP,CAAnC,GAAgD,KAXzD;AAYE,IAAA,UAAU,EAAEwB,UAZd;AAaE,IAAA,YAAY,EAAEE,YAbhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHN,CA9CN,EAkEGL,cAAc,iBACb;AAAK,IAAA,SAAS,EAAC,uCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAG,SAAQQ,KAAM,EAA/B;AAAkC,IAAA,SAAS,EAAC,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1B,aADH,CADF,eAIE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAG,SAAQ0B,KAAM,EAFvB;AAGE,IAAA,EAAE,EAAG,SAAQA,KAAM,EAHrB;AAIE,IAAA,KAAK,EAAEC,aAJT;AAKE,IAAA,QAAQ,EAAEM,CAAC,IAAIL,gBAAgB,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CALjC;AAME,IAAA,YAAY,EAAC,KANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAnEJ,CADF;AAoFD,CAnHD","sourcesContent":["import React, { useState } from \"react\";\nimport RenderField from \"./RenderField\";\n\nconst divideFieldsIntoPages = (fields, pages) => {\n  const tmpFields = pages.map(item => []);\n\n  for (let i = 0; i < fields.length; i++) {\n    // const arr = tmpFields[fields[i].pageNumber];\n    if (tmpFields[fields[i].pageNumber - 1]) {\n      // move page field to the first group\n      if (fields[i].type === \"page\") {\n        tmpFields[fields[i].pageNumber - 2].push(fields[i]);\n      } else {\n        tmpFields[fields[i].pageNumber - 1].push(fields[i]);\n      }\n    }\n  }\n  return tmpFields;\n};\n\nconst getMaxFieldId = fields => {\n  let max = 0;\n  for (let i = 0; i < fields.length; i++) {\n    if (parseInt(fields[i].id) > max) {\n      max = parseInt(fields[i].id);\n    }\n  }\n  return max + 1;\n};\n\nconst fieldTypes = [\n  \"checkbox\",\n  \"email\",\n  \"hidden\",\n  \"html\",\n  \"number\",\n  \"phone\",\n  \"radio\",\n  \"select\",\n  \"multiselect\",\n  \"text\",\n  \"textarea\",\n  \"website\",\n  \"page\",\n  \"date\",\n  \"fileupload\",\n  \"consent\",\n  \"password\",\n  \"section\",\n  \"custom\"\n];\n\nconst honeyPotLables = [\"Name\", \"Email\", \"Phone\", \"Comments\"];\nconst honeypotLabel = honeyPotLables[Math.floor(Math.random() * Math.floor(4))];\n\nexport default props => {\n  const {\n    fields,\n    formValues,\n    updateForm,\n    submitFailed,\n    submitSuccess,\n    touched,\n    setTouched,\n    pagination,\n    activePage,\n    prevStep,\n    nextStep,\n    isNextDisabled,\n    checkConditionalLogic,\n    saveStateToHtmlField,\n    enableHoneypot,\n    styledComponents,\n    customComponents,\n    unsetError,\n    errors,\n    dropzoneText\n  } = props;\n\n  // get page indexes\n  const dividedFields = pagination\n    ? divideFieldsIntoPages(fields, pagination.pages)\n    : undefined;\n  const maxID = getMaxFieldId(fields);\n  const [honeypotValue, setHoneypotValue] = useState(\"\");\n\n  return (\n    <div\n      className={`form-fields${\n        pagination && pagination.pages.length > 1 ? \" hasPages\" : \"\"\n      }`}\n    >\n      {pagination && pagination.pages.length > 1\n        ? pagination.pages.map((page, index) => (\n            <div\n              className={`page${activePage === index + 1 ? \" active\" : \"\"}`}\n              key={`page-${index}`}\n            >\n              {page && (\n                <div className=\"gf_step\">\n                  <span>{page}</span>\n                </div>\n              )}\n              {dividedFields[index].map(\n                field =>\n                  fieldTypes.includes(field.type) && (\n                    <RenderField\n                      key={field.id}\n                      field={field}\n                      formValues={formValues}\n                      submitFailed={submitFailed}\n                      setTouched={setTouched}\n                      submitSuccess={submitSuccess}\n                      updateForm={updateForm}\n                      touched={touched}\n                      pages={pagination.pages.length}\n                      prevStep={prevStep}\n                      nextStep={nextStep}\n                      isNextDisabled={isNextDisabled}\n                      checkConditionalLogic={checkConditionalLogic}\n                      saveStateToHtmlField={saveStateToHtmlField}\n                      styledComponents={styledComponents}\n                      customComponents={customComponents}\n                      error={\n                        errors && errors[field.id] ? errors[field.id] : false\n                      }\n                      unsetError={unsetError}\n                      dropzoneText={dropzoneText}\n                    />\n                  )\n              )}\n            </div>\n          ))\n        : fields.map(\n            field =>\n              fieldTypes.includes(field.type) && (\n                <RenderField\n                  key={field.id}\n                  field={field}\n                  formValues={formValues}\n                  submitFailed={submitFailed}\n                  setTouched={setTouched}\n                  submitSuccess={submitSuccess}\n                  updateForm={updateForm}\n                  touched={touched}\n                  checkConditionalLogic={checkConditionalLogic}\n                  styledComponents={styledComponents}\n                  error={errors && errors[field.id] ? errors[field.id] : false}\n                  unsetError={unsetError}\n                  dropzoneText={dropzoneText}\n                />\n              )\n          )}\n      {enableHoneypot && (\n        <div className=\"form-field gform_validation_container\">\n          <label htmlFor={`input_${maxID}`} className=\"gf-label \">\n            {honeypotLabel}\n          </label>\n          <input\n            type=\"text\"\n            name={`input_${maxID}`}\n            id={`input_${maxID}`}\n            value={honeypotValue}\n            onChange={e => setHoneypotValue(e.target.value)}\n            autoComplete=\"off\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}