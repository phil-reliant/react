{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\phil\\\\OneDrive\\\\Documents\\\\reliant\\\\code\\\\narwhal-digital-reliant-wp\\\\src\\\\templates\\\\ProductCatalog\\\\ResultsPanelBrandColumn.js\";\nimport React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { MakeRelativePath } from '../../utils/UrlUtils';\nimport ArrowNoStem from '../../assets/svgs/arrow-no-stem';\n\nconst ResultsPanelBrandColumn = ({\n  brandsData,\n  checkedBrands,\n  productFamilyTypesData,\n  checkedProductFamilyTypes,\n  onProductFamilySelected,\n  selectedProductFamilyId\n}) => {\n  // console.log('brandsData_', brandsData);\n  // console.log('checkedBrands_', checkedBrands);\n  // console.log('productFamilyTypesData_', productFamilyTypesData);\n  // console.log('checkedProductFamilyTypes_', checkedProductFamilyTypes);\n  // The checkedBrands data passed in contains a collection of brand IDs and whether they are\n  // checked or not. This method takes that, and returns an array of only those brands which have checked === true\n  const getCheckedBrandsOnly = checkedBrands => {\n    let onlyTrueCheckedBrands = [];\n\n    for (let brandEntry in checkedBrands) {\n      let entry = checkedBrands[brandEntry];\n\n      if (typeof entry !== 'undefined') {\n        onlyTrueCheckedBrands.push(parseInt(entry));\n      }\n    } // console.log('onlyTrueCheckedBrands', onlyTrueCheckedBrands);\n\n\n    return onlyTrueCheckedBrands;\n  }; // Takes in a collection of brandData and whether brands are checked or not, and returns a filtered\n  // set of brands which should be rendered (ex: all if no brands checked, or only those checked if some are checked)\n\n\n  const getBrandDataToShow = (brandsData, checkedBrands) => {\n    const trueCheckedBrandsOnly = getCheckedBrandsOnly(checkedBrands);\n\n    if (trueCheckedBrandsOnly.length === 0) {\n      return brandsData;\n    } else {\n      let brandDataToShow = [];\n\n      for (let b in brandsData) {\n        if (trueCheckedBrandsOnly.includes(brandsData[b].productBrandId)) {\n          brandDataToShow.push(brandsData[b]);\n        }\n      }\n\n      return brandDataToShow;\n    }\n  }; // The checkedProductTypes data passed in contains a collection of product type IDs and whether they are\n  // checked or not. This method takes that, and returns an array of only those product family types which have checked === true\n\n\n  const getCheckedProductFamilyTypesOnly = checkedProductFamilyTypes => {\n    let onlyTrueCheckedProductTypes = [];\n\n    for (let ptEntry in checkedProductFamilyTypes) {\n      let entry = checkedProductFamilyTypes[ptEntry];\n\n      if (typeof entry !== 'undefined') {\n        onlyTrueCheckedProductTypes.push(parseInt(entry));\n      }\n    } // console.log('onlyTrueCheckedProductTypes', onlyTrueCheckedProductTypes);\n\n\n    return onlyTrueCheckedProductTypes;\n  };\n\n  const getProductFamilyTypesToShow = checkedProductFamilyTypes => {\n    const trueCheckedProductTypes = getCheckedProductFamilyTypesOnly(checkedProductFamilyTypes); // if specific ones were selected, then return them\n\n    if (trueCheckedProductTypes.length !== 0) {\n      return trueCheckedProductTypes;\n    } // otherwise we build a collection of all product types to return\n\n\n    let productTypeIDsToShow = [];\n\n    for (var index in productFamilyTypesData) {\n      productTypeIDsToShow.push(productFamilyTypesData[index].productFamilyTypeId);\n    }\n\n    return productTypeIDsToShow;\n  }; // Takes in a collection of brandData and whether product types are checked or not, and returns a filtered\n  // set of brands with their subcollection of productCache filtered by what should be rendered (ex: all if no product types checked,\n  // or only those checked if some are checked)\n\n\n  const getBrandAndProductTypeDataToShow = (brandsData, checkedProductFamilyTypes) => {\n    const productTypesToShow = getProductFamilyTypesToShow(checkedProductFamilyTypes); // console.log('productTypesToShow', productTypesToShow);\n\n    let filteredBrandsData = [];\n\n    for (let b in brandsData) {\n      const thisBrand = brandsData[b];\n      let addThisBrand = false;\n      let jsonParsed = false;\n      let brandProductCache = {};\n\n      try {\n        brandProductCache = JSON.parse(thisBrand.productCache);\n        jsonParsed = true;\n      } catch (ex) {\n        // there is no product cache, so there is nothing to show for this brand\n        jsonParsed = false;\n      }\n\n      if (jsonParsed) {\n        // iterate the product cache looking at productFamilyTypeId\n        let filteredProductCache = [];\n\n        for (var index in productTypesToShow) {\n          let typeId = productTypesToShow[index];\n\n          if (typeId in brandProductCache) {\n            let brandProductCacheEntry = brandProductCache[typeId];\n\n            if (hasProductFamiliesToShowForBrandAndType(brandProductCacheEntry)) {\n              filteredProductCache.push(brandProductCacheEntry);\n              addThisBrand = true;\n            }\n          }\n        }\n\n        thisBrand['filteredProductCache'] = filteredProductCache; // console.log('adjusted thisBrand', thisBrand);\n      } else {\n        thisBrand['filteredProductCache'] = [];\n      } // we do want to show a brand, even if it has no data, if it has a link and/or additional links specified (REF: RUAT-16)\n\n\n      if (!addThisBrand) {\n        if (thisBrand.BrandInformation && thisBrand.BrandInformation.linkFromHardwareCatalog && thisBrand.BrandInformation.linkFromHardwareCatalog.url) {\n          addThisBrand = true;\n        }\n\n        if (thisBrand.BrandInformation && thisBrand.BrandInformation.additionalLinks && thisBrand.BrandInformation.additionalLinks.length > 0) {\n          addThisBrand = true;\n        }\n      }\n\n      if (addThisBrand) {\n        filteredBrandsData.push(brandsData[b]);\n      }\n    }\n\n    return filteredBrandsData;\n  };\n\n  const hasProductFamiliesToShowForBrandAndType = productType => {\n    // console.log('pf', productType.families);\n    let hasDataToShow = false;\n\n    if (productType.families && Object.keys(productType.families).length > 0) {\n      for (var key in productType.families) {\n        if (productType.families.hasOwnProperty(key)) {\n          // make sure the family actually has products in it\n          if (productType.families[key].products.length > 0) {\n            hasDataToShow = true;\n          }\n        }\n      }\n    }\n\n    return hasDataToShow;\n  }; // sort families alphabetically by name\n\n\n  function GetFamilySortOrder() {\n    return function (a, b) {\n      if (a[1].name > b[1].name) {\n        return 1;\n      } else if (a[1].name < b[1].name) {\n        return -1;\n      }\n\n      return 0;\n    };\n  } // takes in a javascript collection of families and turns it into a sorted array (array item has item[0] = familyID and item[1] = data collection about the family)\n\n\n  const sortFamiliesIntoArray = families => {\n    let familyArray = [];\n\n    if (!families || families.length === 0) {\n      return familyArray;\n    }\n\n    for (var item in families) {\n      familyArray.push([item, families[item]]);\n    }\n\n    familyArray.sort(GetFamilySortOrder());\n    return familyArray;\n  }; // returns a link text that has the number of items appended (if any) (ex: 'Product Family (22)')\n\n\n  const formatFamilyLinkText = family => {\n    // console.log('family', family.products);\n    let linkText = `${family.name}`;\n\n    if (family.products.length > 0) {\n      linkText = `${family.name} (${family.products.length})`;\n    } else {\n      linkText = '';\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, linkText);\n  };\n\n  const getBrandPageLinkSection = brandEntry => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `results-panel__brand-column__link-section`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 4\n      }\n    }, brandEntry.BrandInformation && brandEntry.BrandInformation.linkFromHardwareCatalog && brandEntry.BrandInformation.linkFromHardwareCatalog.url ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons --align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      className: \"button --standard --allow-narrow arrow-icon\",\n      to: MakeRelativePath(brandEntry.BrandInformation.linkFromHardwareCatalog.url),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 8\n      }\n    }, \"Learn about \", brandEntry.title), /*#__PURE__*/React.createElement(\"div\", {\n      className: `arrow-icon`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(ArrowNoStem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    })))) : /*#__PURE__*/React.createElement(React.Fragment, null), brandEntry.BrandInformation && brandEntry.BrandInformation.additionalLinks && brandEntry.BrandInformation.additionalLinks.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons --align-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 6\n      }\n    }, brandEntry.BrandInformation.additionalLinks.map((linkEntry, index) => /*#__PURE__*/React.createElement(Link, {\n      key: `additional-link-${index}`,\n      className: \"button --standard --allow-narrow --black-border arrow-icon\",\n      target: linkEntry.link.target,\n      to: MakeRelativePath(linkEntry.link.url),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 10\n      }\n    }, linkEntry.link.title), /*#__PURE__*/React.createElement(\"div\", {\n      className: `arrow-icon`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(ArrowNoStem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }))))) : /*#__PURE__*/React.createElement(React.Fragment, null));\n  }; // first filter by selected brands (or all if none selected) ..\n\n\n  const brandDataFilteredBySelectedBrands = getBrandDataToShow(brandsData, checkedBrands); // console.log('brandDataFilteredBySelectedBrands', brandDataFilteredBySelectedBrands);\n  // .. then filter by selected product type (or all if none selected)\n\n  const filteredData = getBrandAndProductTypeDataToShow(brandDataFilteredBySelectedBrands, checkedProductFamilyTypes); // console.log('filteredData', filteredData); // look at brand.filteredProductCache\n\n  const rootClass = 'results-panel__brand-column';\n  return (\n    /*#__PURE__*/\n    // brand > type > family\n    React.createElement(\"div\", {\n      className: rootClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 3\n      }\n    }, filteredData.map(brandEntry => /*#__PURE__*/React.createElement(\"div\", {\n      key: `brand-${brandEntry.productBrandId}`,\n      className: `${rootClass}__brand-section`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: `${rootClass}__brand-section__heading`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }\n    }, brandEntry.title), // brand page links\n    getBrandPageLinkSection(brandEntry), // product family types\n    brandEntry.filteredProductCache.map(prodTypeEntry => hasProductFamiliesToShowForBrandAndType(prodTypeEntry) ? /*#__PURE__*/React.createElement(\"div\", {\n      key: `pt-${prodTypeEntry.name}`,\n      className: `${rootClass}__brand-section__product-type-section`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: `${rootClass}__brand-section__product-type-section__heading`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, prodTypeEntry.name), // console.log('fams', prodTypeEntry.families)\n    // product families\n    sortFamiliesIntoArray(prodTypeEntry.families).map((ptFamily, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: `ptf-${index}`,\n      className: `${rootClass}__brand-section__product-type-section__product-type-family`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: `${rootClass}__brand-section__product-type-section__product-type-family__heading\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${selectedProductFamilyId === ptFamily[0] ? 'active' : ''}`,\n      onClick: () => onProductFamilySelected(ptFamily[0]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 14\n      }\n    }, formatFamilyLinkText(ptFamily[1]))))) : /*#__PURE__*/React.createElement(React.Fragment, null)))))\n  );\n};\n\nexport default ResultsPanelBrandColumn;","map":{"version":3,"sources":["C:/Users/phil/OneDrive/Documents/reliant/code/narwhal-digital-reliant-wp/src/templates/ProductCatalog/ResultsPanelBrandColumn.js"],"names":["React","Link","MakeRelativePath","ArrowNoStem","ResultsPanelBrandColumn","brandsData","checkedBrands","productFamilyTypesData","checkedProductFamilyTypes","onProductFamilySelected","selectedProductFamilyId","getCheckedBrandsOnly","onlyTrueCheckedBrands","brandEntry","entry","push","parseInt","getBrandDataToShow","trueCheckedBrandsOnly","length","brandDataToShow","b","includes","productBrandId","getCheckedProductFamilyTypesOnly","onlyTrueCheckedProductTypes","ptEntry","getProductFamilyTypesToShow","trueCheckedProductTypes","productTypeIDsToShow","index","productFamilyTypeId","getBrandAndProductTypeDataToShow","productTypesToShow","filteredBrandsData","thisBrand","addThisBrand","jsonParsed","brandProductCache","JSON","parse","productCache","ex","filteredProductCache","typeId","brandProductCacheEntry","hasProductFamiliesToShowForBrandAndType","BrandInformation","linkFromHardwareCatalog","url","additionalLinks","productType","hasDataToShow","families","Object","keys","key","hasOwnProperty","products","GetFamilySortOrder","a","name","sortFamiliesIntoArray","familyArray","item","sort","formatFamilyLinkText","family","linkText","getBrandPageLinkSection","title","map","linkEntry","link","target","brandDataFilteredBySelectedBrands","filteredData","rootClass","prodTypeEntry","ptFamily"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { MakeRelativePath } from '../../utils/UrlUtils';\nimport ArrowNoStem from '../../assets/svgs/arrow-no-stem';\n\nconst ResultsPanelBrandColumn = ({\n\tbrandsData,\n\tcheckedBrands,\n\tproductFamilyTypesData,\n\tcheckedProductFamilyTypes,\n\tonProductFamilySelected,\n\tselectedProductFamilyId\n}) => {\n\n\t// console.log('brandsData_', brandsData);\n\t// console.log('checkedBrands_', checkedBrands);\n\t// console.log('productFamilyTypesData_', productFamilyTypesData);\n\t// console.log('checkedProductFamilyTypes_', checkedProductFamilyTypes);\n\n\t// The checkedBrands data passed in contains a collection of brand IDs and whether they are\n\t// checked or not. This method takes that, and returns an array of only those brands which have checked === true\n\tconst getCheckedBrandsOnly = (checkedBrands) => {\n\t\tlet onlyTrueCheckedBrands = [];\n\t\tfor (let brandEntry in checkedBrands) {\n\t\t\tlet entry = checkedBrands[brandEntry];\n\t\t\tif (typeof entry !== 'undefined') {\n\t\t\t\tonlyTrueCheckedBrands.push(parseInt(entry));\n\t\t\t}\n\t\t}\n\n\t\t// console.log('onlyTrueCheckedBrands', onlyTrueCheckedBrands);\n\t\treturn onlyTrueCheckedBrands;\n\t}\n\n\t// Takes in a collection of brandData and whether brands are checked or not, and returns a filtered\n\t// set of brands which should be rendered (ex: all if no brands checked, or only those checked if some are checked)\n\tconst getBrandDataToShow = (brandsData, checkedBrands) => {\n\t\tconst trueCheckedBrandsOnly = getCheckedBrandsOnly(checkedBrands);\n\t\tif (trueCheckedBrandsOnly.length === 0) {\n\t\t\treturn brandsData;\n\t\t} else {\n\t\t\tlet brandDataToShow = [];\n\t\t\tfor (let b in brandsData) {\n\t\t\t\tif (trueCheckedBrandsOnly.includes(brandsData[b].productBrandId)) {\n\t\t\t\t\tbrandDataToShow.push(brandsData[b]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn brandDataToShow;\n\t\t}\n\t}\n\n\t// The checkedProductTypes data passed in contains a collection of product type IDs and whether they are\n\t// checked or not. This method takes that, and returns an array of only those product family types which have checked === true\n\tconst getCheckedProductFamilyTypesOnly = (checkedProductFamilyTypes) => {\n\t\tlet onlyTrueCheckedProductTypes = [];\n\t\tfor (let ptEntry in checkedProductFamilyTypes) {\n\t\t\tlet entry = checkedProductFamilyTypes[ptEntry];\n\t\t\tif (typeof entry !== 'undefined') {\n\t\t\t\tonlyTrueCheckedProductTypes.push(parseInt(entry));\n\t\t\t}\n\t\t}\n\t\t// console.log('onlyTrueCheckedProductTypes', onlyTrueCheckedProductTypes);\n\t\treturn onlyTrueCheckedProductTypes;\n\t}\n\n\tconst getProductFamilyTypesToShow = (checkedProductFamilyTypes) => {\n\t\tconst trueCheckedProductTypes = getCheckedProductFamilyTypesOnly(checkedProductFamilyTypes);\n\n\t\t// if specific ones were selected, then return them\n\t\tif (trueCheckedProductTypes.length !== 0) {\n\t\t\treturn trueCheckedProductTypes;\n\t\t}\n\n\t\t// otherwise we build a collection of all product types to return\n\t\tlet productTypeIDsToShow = [];\n\t\tfor (var index in productFamilyTypesData) {\n\t\t\tproductTypeIDsToShow.push(productFamilyTypesData[index].productFamilyTypeId);\n\t\t}\n\n\t\treturn productTypeIDsToShow;\n\t}\n\n\t// Takes in a collection of brandData and whether product types are checked or not, and returns a filtered\n\t// set of brands with their subcollection of productCache filtered by what should be rendered (ex: all if no product types checked,\n\t// or only those checked if some are checked)\n\tconst getBrandAndProductTypeDataToShow = (brandsData, checkedProductFamilyTypes) => {\n\t\tconst productTypesToShow = getProductFamilyTypesToShow(checkedProductFamilyTypes);\n\t\t// console.log('productTypesToShow', productTypesToShow);\n\n\t\tlet filteredBrandsData = [];\n\n\t\tfor (let b in brandsData) {\n\t\t\tconst thisBrand = brandsData[b];\n\n\t\t\tlet addThisBrand = false;\n\t\t\tlet jsonParsed = false;\n\t\t\tlet brandProductCache = {};\n\t\t\ttry {\n\t\t\t\tbrandProductCache = JSON.parse(thisBrand.productCache);\n\t\t\t\tjsonParsed = true;\n\t\t\t} catch (ex) {\n\t\t\t\t// there is no product cache, so there is nothing to show for this brand\n\t\t\t\tjsonParsed = false;\n\t\t\t}\n\n\t\t\tif (jsonParsed) {\n\t\t\t\t// iterate the product cache looking at productFamilyTypeId\n\t\t\t\tlet filteredProductCache = [];\n\t\t\t\tfor (var index in productTypesToShow) {\n\t\t\t\t\tlet typeId = productTypesToShow[index];\n\n\t\t\t\t\tif (typeId in brandProductCache) {\n\t\t\t\t\t\tlet brandProductCacheEntry = brandProductCache[typeId];\n\n\t\t\t\t\t\tif (hasProductFamiliesToShowForBrandAndType(brandProductCacheEntry)) {\n\t\t\t\t\t\t\tfilteredProductCache.push(brandProductCacheEntry);\n\t\t\t\t\t\t\taddThisBrand = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthisBrand['filteredProductCache'] = filteredProductCache;\n\t\t\t\t// console.log('adjusted thisBrand', thisBrand);\n\t\t\t} else {\n\t\t\t\tthisBrand['filteredProductCache'] = [];\n\t\t\t}\n\n\t\t\t// we do want to show a brand, even if it has no data, if it has a link and/or additional links specified (REF: RUAT-16)\n\t\t\tif (!addThisBrand) {\n\t\t\t\tif (thisBrand.BrandInformation && thisBrand.BrandInformation.linkFromHardwareCatalog && thisBrand.BrandInformation.linkFromHardwareCatalog.url) {\n\t\t\t\t\taddThisBrand = true;\n\t\t\t\t}\n\t\t\t\tif (thisBrand.BrandInformation && thisBrand.BrandInformation.additionalLinks && thisBrand.BrandInformation.additionalLinks.length > 0) {\n\t\t\t\t\taddThisBrand = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (addThisBrand) {\n\t\t\t\tfilteredBrandsData.push(brandsData[b]);\n\t\t\t}\n\t\t}\n\t\treturn filteredBrandsData;\n\t}\n\n\tconst hasProductFamiliesToShowForBrandAndType = (productType) => {\n\t\t// console.log('pf', productType.families);\n\t\tlet hasDataToShow = false;\n\t\tif (productType.families && Object.keys(productType.families).length > 0) {\n\t\t\tfor (var key in productType.families) {\n\t\t\t\tif (productType.families.hasOwnProperty(key)) {\n\t\t\t\t\t// make sure the family actually has products in it\n\t\t\t\t\tif (productType.families[key].products.length > 0) {\n\t\t\t\t\t\thasDataToShow = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn hasDataToShow;\n\t}\n\n\t// sort families alphabetically by name\n\tfunction GetFamilySortOrder() {\n\t\treturn function(a, b) {\n\t\t\tif (a[1].name > b[1].name) {\n\t\t\t\treturn 1;\n\t\t\t} else if (a[1].name < b[1].name) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t// takes in a javascript collection of families and turns it into a sorted array (array item has item[0] = familyID and item[1] = data collection about the family)\n\tconst sortFamiliesIntoArray = (families) => {\n\t\tlet familyArray = [];\n\n\t\tif (!families || families.length === 0) {\n\t\t\treturn familyArray;\n\t\t}\n\n\t\tfor (var item in families) {\n\t\t\tfamilyArray.push([item, families[item]]);\n\t\t}\n\n\t\tfamilyArray.sort(GetFamilySortOrder());\n\n\t\treturn familyArray;\n\t}\n\n\t// returns a link text that has the number of items appended (if any) (ex: 'Product Family (22)')\n\tconst formatFamilyLinkText = (family) => {\n\t\t// console.log('family', family.products);\n\t\tlet linkText = `${family.name}`;\n\t\t\tif (family.products.length > 0) {\n\t\t\t\tlinkText = `${family.name} (${family.products.length})`;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlinkText = '';\n\t\t\t}\n\n\t\treturn (\n\t\t\t<>{linkText}</>\n\t\t);\n\t}\n\n\tconst getBrandPageLinkSection = (brandEntry) => {\n\t\treturn (\n\t\t\t<div className={`results-panel__brand-column__link-section`}>\n\t\t\t\t{ brandEntry.BrandInformation &&\n\t\t\t\t\tbrandEntry.BrandInformation.linkFromHardwareCatalog &&\n\t\t\t\t\tbrandEntry.BrandInformation.linkFromHardwareCatalog.url ?\n\t\t\t\t\t<div className=\"buttons --align-left\">\n\t\t\t\t\t\t<Link className=\"button --standard --allow-narrow arrow-icon\"\n\t\t\t\t\t\t\tto={MakeRelativePath(brandEntry.BrandInformation.linkFromHardwareCatalog.url)}>\n\t\t\t\t\t\t\t<span>Learn about {brandEntry.title}</span>\n\t\t\t\t\t\t\t<div className={`arrow-icon`}>\n\t\t\t\t\t\t\t\t<ArrowNoStem />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t:\n\t\t\t\t\t<></>\n\t\t\t\t}\n\t\t\t\t{ brandEntry.BrandInformation &&\n\t\t\t\t\tbrandEntry.BrandInformation.additionalLinks &&\n\t\t\t\t\tbrandEntry.BrandInformation.additionalLinks.length > 0 ?\n\t\t\t\t\t<div className=\"buttons --align-left\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbrandEntry.BrandInformation.additionalLinks.map((linkEntry, index) => (\n\t\t\t\t\t\t\t\t<Link key={`additional-link-${index}`}\n\t\t\t\t\t\t\t\t\tclassName=\"button --standard --allow-narrow --black-border arrow-icon\"\n\t\t\t\t\t\t\t\t\ttarget={linkEntry.link.target}\n\t\t\t\t\t\t\t\t\tto={MakeRelativePath(linkEntry.link.url)}>\n\t\t\t\t\t\t\t\t\t<span>{linkEntry.link.title}</span>\n\t\t\t\t\t\t\t\t\t<div className={`arrow-icon`}>\n\t\t\t\t\t\t\t\t\t\t<ArrowNoStem />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t:\n\t\t\t\t\t<></>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// first filter by selected brands (or all if none selected) ..\n\tconst brandDataFilteredBySelectedBrands = getBrandDataToShow(brandsData, checkedBrands);\n\t// console.log('brandDataFilteredBySelectedBrands', brandDataFilteredBySelectedBrands);\n\n\t// .. then filter by selected product type (or all if none selected)\n\tconst filteredData =\n\t\tgetBrandAndProductTypeDataToShow(brandDataFilteredBySelectedBrands, checkedProductFamilyTypes);\n\t// console.log('filteredData', filteredData); // look at brand.filteredProductCache\n\n\tconst rootClass = 'results-panel__brand-column';\n\treturn (\n\t\t// brand > type > family\n\t\t<div className={rootClass}>\n\t\t\t{\n\t\t\t\tfilteredData.map(brandEntry => (\n\t\t\t\t\t<div key={`brand-${brandEntry.productBrandId}`}\n\t\t\t\t\t\tclassName={`${rootClass}__brand-section`}>\n\n\t\t\t\t\t\t{/* Brand (ex: DELL) */}\n\t\t\t\t\t\t<h3 className={`${rootClass}__brand-section__heading`}>{brandEntry.title}</h3>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// brand page links\n\t\t\t\t\t\t\tgetBrandPageLinkSection(brandEntry)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// product family types\n\t\t\t\t\t\t\tbrandEntry.filteredProductCache.map(prodTypeEntry => (\n\n\t\t\t\t\t\t\t\thasProductFamiliesToShowForBrandAndType(prodTypeEntry) ?\n\n\t\t\t\t\t\t\t\t\t<div key={`pt-${prodTypeEntry.name}`}\n\t\t\t\t\t\t\t\t\t\tclassName={`${rootClass}__brand-section__product-type-section`}>\n\t\t\t\t\t\t\t\t\t\t<h4 className={`${rootClass}__brand-section__product-type-section__heading`}>\n\t\t\t\t\t\t\t\t\t\t\t{/* Product Type heading (ex: Servers, Storage, Networking) */}\n\t\t\t\t\t\t\t\t\t\t\t{prodTypeEntry.name}\n\t\t\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// console.log('fams', prodTypeEntry.families)\n\t\t\t\t\t\t\t\t\t\t\t// product families\n\t\t\t\t\t\t\t\t\t\t\tsortFamiliesIntoArray(prodTypeEntry.families).map((ptFamily, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={`ptf-${index}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={`${rootClass}__brand-section__product-type-section__product-type-family`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5 className={`${rootClass}__brand-section__product-type-section__product-type-family__heading\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${selectedProductFamilyId === ptFamily[0] ? 'active': ''}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onProductFamilySelected(ptFamily[0])}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{formatFamilyLinkText(ptFamily[1])}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default ResultsPanelBrandColumn;\n"]},"metadata":{},"sourceType":"module"}